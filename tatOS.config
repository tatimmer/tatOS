;tatOS.config
;Oct 2015

;this file sets hardware & software dependent options for tatOS
;set these values and re-assemble 
;see "makefile" for how to build tatos



;define the usb controller type
;**********************************
;this controls what usb controller you will use
;and controls what options are presented to you in usbcentral
;all the driver code in /usb depends on the value of USBCONTROLLERTYPE
;if you have the old uhci with 2-ports on back then set....USBCONTROLLERTYPE == 0
;if you have ehci with uhci companion controllers then set USBCONTROLLERTYPE == 1
;if you have ehci with integral root hub then set .........USBCONTROLLERTYPE == 2
;if you dont know what you have then: 
;on linux run lspci -v
;on windows see the device manager
;on tatOS from usbcentral run the usbcontroller pci bus scan to get bus:dev:fun
;and download and study your chipset & usb controller data sheets
%define USBCONTROLLERTYPE 1


;define the bus:dev:fun for controller type == 1
;**********************************************************
;VIA vt6212 pci addon card VendorID=1106h, DeviceID=3104h
;EHCI usb controller w/ (2) UHCI companion controllers
;this is my tatOS test machine
%define EHCI_WITH_COMPANION_BUS 0
%define EHCI_WITH_COMPANION_DEV 0x10
%define EHCI_WITH_COMPANION_FUN 2
%define EHCI_COMPANION_UHCI_BUS_1 0
%define EHCI_COMPANION_UHCI_DEV_1 0x10
%define EHCI_COMPANION_UHCI_FUN_1 0
%define EHCI_COMPANION_UHCI_BUS_2 0
%define EHCI_COMPANION_UHCI_DEV_2 0x10
%define EHCI_COMPANION_UHCI_FUN_2 1



;define the bus:dev:fun for controller type == 2
;*****************************************************
;new ACER laptop has 2 EHCI controllers, each with integrated root hub
;root hub acts as transaction translator for low speed devices
;Windows device manager says "Intel 7 Series / C216 Chipset Platform Controller Hub"
;VendorID=8086h   DeviceID=1e2dh   (ehci #1)
;ehci #1 has a hi speed device plugged into an internal port 
;ehci #1 has no external ports 
;tatOS detects one device attached to one port of this controller
;Windows device manager calls it a "USB Composite Device" 
;tatOS reports the device has VID=4f2, PID=b337, class=03, subclass=00, protocol=04
;this is a webcam made by chicony, tatOS has no support for webcams
;%define EHCI_WITH_ROOTHUB_BUS 0
;%define EHCI_WITH_ROOTHUB_DEV 0x1a
;%define EHCI_WITH_ROOTHUB_FUN 0
;and this is the ehci #2, DID=1e26
;it controls the 3 exernal usb ports on the laptop, we use for flash and mouse
%define EHCI_WITH_ROOTHUB_BUS 0
%define EHCI_WITH_ROOTHUB_DEV 0x1d  
%define EHCI_WITH_ROOTHUB_FUN 0



;define the bus:dev:fun for controller type == 0
;***************************************************
;my old test machine was built with just UHCI and 2 root ports
;flash drive and mouse work with UHCI directly
;this is the simplest way to control flash and mouse but also slowest
;VendorID=8086h   DeviceID=7112h
%define UHCI_BUS 0
%define UHCI_DEV 7
%define UHCI_FUN 2




;USB Mouse Report Button Index
;********************************
;for manhattan mouse with 6 byte report having leading 01 byte use 01
;for Logitech or Microsoft Mouse with the normal 4 byte report use 00
;run usb mouse report demo from usbcentral 
;see /usb/mouseinterrupt.s for more info
%define MOUSERPRTBTNINDX 1




;VERBOSEDUMP
;***************
;some driver code and tlib functions can provide extra output of whats going on
;ttasm symbol table lookup return values are available with this option
;ttasm dump messages on pass=1 are normally erased but can be shown with this option
;note: ttasm will fill up the dump during assembly of very large files 
;to the point that output to the dump will be truncated if you select this option
;usb driver bitfields are available
;all verbose output is written as ascii strings to the dump
;1=provide verbose dump 
;0=do not provide verbose dump
%define VERBOSEDUMP  0



;TEDIT Options
;*****************
;to show line numbers in the left hand column use 1 else use 0
%define TEDITSHOWLINENUMBERS 1


