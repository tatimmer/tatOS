
;main37   Nov 19, 2015

;Project: MultiSource
;files:  main.s and file.s

;main.s is the primary source file
;file.s is the secondary source file

;this demonstrates how to assemble with ttasm and tlink
;a project consisting of multiple source files which contain
;"extern" and "public" symbols

;see tatOS/tlib/tableext.s for details on the "extern" symbol table
;see tatOS/tlib/tablepub.s for details on the "public" symbol table
;see tatOS/tlib/tlink.s which reads both the extern and public tables
;and patches the executable code as needed

;to build the executable you must assemble both files in order then link:
;  [1] assemble main.s  (F11 from tedit)
;  [2] assemble file.s  (F11 from tedit)
;  [3] link             (CTRL+F11 from tedit)

;if you assemble but forget to link and try to run
;tatOS will generate a page fault and hang 
;CTRL+ALT+DEL to break out and return to tedit

;the graphics output is a rectangle, 2 lines and 4 circles
;values are also written to the dump


;each source file must be assembled to a unique spot in memory
;that doesnt overlap, the first source should be assembled to
;"STARTOFEXE"
org STARTOFEXE

;each source file must be assigned a unique # from 0->0xff
source 0

;the first source file of a multi-source project must call "erasepe"
;this erases the public and extern symbol tables
erasepe


;function entry points defined in file.s
;all extern and public symbols are max 11 characters long
extern DisplayRect
extern DrawCircle
extern DrawLine

;public data symbol defined in file.s
extern apple


;*************
;   DATA
;*************


;this data is used in file.s to draw a line
public LineX2
dd 799

public LineY2
dd 599

str0:
db 'address of symbol apple',0
str1:
db 'value of symbol apple',0




;*************
;   CODE
;*************


..start

	backbufclear


	;these functions are in the secondary source file
	;they are declared as "public"
	;the corners of this rect are 100,100,400,400
	call DisplayRect



	;draw a circle at the rect upper left
	push 100
	push 100
	push GRE
	call DrawCircle

	;draw a circle at the rect upper right
	push 400
	push 100
	push BLU
	call DrawCircle

	;draw a circle at the rect lower right
	push 400
	push 400
	push RED
	call DrawCircle

	;draw a circle at the rect lower left
	push 100
	push 400
	push BLA
	call DrawCircle




	;draw a line from rect upper left to lower right
	push 100  ;x1
	push 100  ;y1
	push 400  ;x2
	push 400  ;y2
	call DrawLine

	;draw another line from rect upper right to lower left
	push 400
	push 100
	push 100
	push 400
	call DrawLine




	;dump the address of apple
	mov ebx,apple
	mov eax,9     ;dumpebx
	mov ecx,str0  ;string tab
	mov edx,0     ;32bit register
	sysenter

	;dump the value of apple
	mov ebx,[apple]
	mov eax,9     ;dumpebx
	mov ecx,str1  ;string tab
	mov edx,0     ;32bit register
	sysenter

.done:

	swapbuf
	getc

	exit



;********** the end thats all folks *****************************



 
           
               
