
;*********************************************************
;MineSweeper

;April 2013
;rev Nov 2013 for tatOS protected mode interface

;this program requires the usb mouse
;this program operates simto as found on windows or Linux

;at startup a blank 16x16 grid is presented
;you Lclick on any cell to expose the cell value
;or Rclick to put a flag

;each cell value will contain one of the following:
; 1) blank cell
; 2) bomb 
; 3) a "vacinity" value 

;vacinity value is a number representing how many bombs are 
;"touching" that cells sides or corners
;The idea is to expose all cells with vacinity values 
;and not expose a bomb
;you could have a cell surrounded by up to 8 bombs
;but we only have support in this program for numbers 1-5

;if you want to cheat and see the bombs push F2

;this version has all the bitmaps assembled into the source
;as arrays of ascii text, littlebits can output this format

;coded by tat, assembles with ttasm for tatOS
;*********************************************************

org STARTOFEXE



;**************
;    DATA
;**************
	


;controls where the minesweeper grid appears on the screen
;XGRID and YGRID are the upper left corner
equ XGRID,250
equ YGRID,200

;XGRIDMAX=XGRID+256 and YGRIDMAX=YGRID+256
equ XGRIDMAX,XGRID+256
equ YGRIDMAX,YGRID+256





;dwords
index:
dd 0
row:
dd 0
col:
dd 0
blankcellcount:
dd 0
blankcellcol:
dd 0
blankcellrow:
dd 0
showbombs:
dd 0
timercounter:
dd 0
TwoFiftySix:
dd 256
mouseY:
dd 0
clockrunning:
dd 0


;reserve space for BombLocation[], Vacinity[] and Display[] arrays
;these arrays are accessed by dword read/write
;each array can hold 16x16=256 dwords because our grid is 16x16
;BombLocation identifies where the bombs are located on the grid
;1=bomb, 0=no bomb
;256 dwords requires 1024 bytes
BombLocation:
db0 1024

;each Vacinity dword may hold 1,2,3,4,5 indicating 
;qty of bombs "touching" that cell
Vacinity:
db0 1024

;paint uses this array to display the current state of the grid
;each dword holds a bitmap address to Display
Display:
db0 1024




;strings
menu:
db '      F1=NewGame F2=BombsShowNoShow F3=TimerOnOff',0


str2:
db 'Minesweeper',0

str3:
db 'RAND',0

str4:
db '[GetMouseIndex] index of cell',0

str5:
db '[GetMouseIndex] column',0

str6:
db '[GetMouseIndex] row',0

str7:
db '[SetDisplay2Vicinity] cell index',0

str8:
db 'Dumping BombLocation array',0

str9:
db 'Dumping Vacinity array',0




;these are our bitmaps, all 16x16

NumberOne:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,240,240,246,246,246,246,246,246,246,246,246,246,246,246,246,240,240
db 240,246,246,246,246,246,246,246,246,246,246,246,246,240,240,240,240,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,240,240,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,240,240,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,240,240,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,240,240,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,240,240,246,246,246,246,246,246,246,246,246,246,246
db 246,240,240,240,240,240,240,246,246,246,246,246,246,246,246,246,246,240
db 240,240,240,240,240,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246




NumberTwo:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,18,18,18,18,18,246,246,246,246,246,246,246,246,246,246,18,18
db 18,18,18,18,18,246,246,246,246,246,246,246,246,246,18,18,246,246
db 246,18,18,246,246,246,246,246,246,246,246,246,246,246,246,246,246,18
db 18,246,246,246,246,246,246,246,246,246,246,246,246,246,18,18,246,246
db 246,246,246,246,246,246,246,246,246,246,246,18,18,246,246,246,246,246
db 246,246,246,246,246,246,246,246,18,18,246,246,246,246,246,246,246,246
db 246,246,246,246,246,18,18,246,246,246,246,246,246,246,246,246,246,246
db 246,246,18,18,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 18,18,18,18,18,18,18,246,246,246,246,246,246,246,246,246,18,18
db 18,18,18,18,18,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246



NumberThree:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 243,243,243,243,243,243,243,246,246,246,246,246,246,246,246,246,243,243
db 243,243,243,243,243,243,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,243,243,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 243,243,246,246,246,246,246,246,246,246,246,246,246,243,243,243,243,246
db 246,246,246,246,246,246,246,246,246,246,246,243,243,243,243,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,243,243,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,243,243,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,243,243,246,246,246,246,246,246,246,246
db 243,243,243,243,243,243,243,243,246,246,246,246,246,246,246,246,243,243
db 243,243,243,243,243,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246



NumberFour:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,244,244
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,244,244,246,246
db 246,246,244,244,246,246,246,246,246,246,246,246,244,244,246,246,246,246
db 244,244,246,246,246,246,246,246,246,246,244,244,246,246,246,246,244,244
db 246,246,246,246,246,246,246,246,244,244,246,246,246,246,244,244,246,246
db 246,246,246,246,246,246,244,244,246,246,246,246,244,244,246,246,246,246
db 246,246,246,246,244,244,244,244,244,244,244,244,246,246,246,246,246,246
db 246,246,244,244,244,244,244,244,244,244,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,244,244,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,244,244,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246



NumberFive:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,250,250,250,250,250,250,250,246,246,246,246,246,246,246,246,250,250
db 250,250,250,250,250,250,246,246,246,246,246,246,246,246,250,250,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,250,250,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,250,250,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,250,250,250,250,250,250,250,246,246,246
db 246,246,246,246,246,246,250,250,250,250,250,250,250,250,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,250,250,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,250,250,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,250,250,246,246,246,246,246,246,246,246,250,250
db 250,250,250,250,250,250,246,246,246,246,246,246,246,246,250,250,250,250
db 250,250,250,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246


FLAG:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,251,251,246,246,246,246,246,246,246,246,246,246,246,246
db 246,251,251,251,246,246,246,246,246,246,246,246,246,246,246,246,251,251
db 251,251,246,246,246,246,246,246,246,246,246,246,246,251,251,251,251,251
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,239,239,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,239,239,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,239,239,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,239,239,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,239,239,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,239,239,246,246,246,246,246,246,246,246,246,246,246,246
db 239,239,239,239,239,239,246,246,246,246,246,246,246,246,246,239,239,239
db 239,239,239,239,239,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246


BOMB:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,226,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,226,226,226,246,246,246,246,246,246,246,246,246,246,246,246,246
db 226,226,226,246,246,246,246,246,246,246,246,246,246,246,239,239,239,239
db 239,239,239,246,246,246,246,246,246,246,246,246,239,254,254,239,239,239
db 239,246,246,246,246,246,246,246,226,226,239,254,239,239,239,239,239,226
db 226,246,246,246,246,226,226,226,239,239,239,239,239,239,239,226,226,226
db 246,246,246,246,226,226,239,239,239,239,239,239,239,226,226,246,246,246
db 246,246,246,246,239,239,239,239,239,239,239,246,246,246,246,246,246,246
db 246,246,239,239,239,239,239,239,239,246,246,246,246,246,246,246,246,246
db 246,246,226,226,226,246,246,246,246,246,246,246,246,246,246,246,246,246
db 226,226,226,246,246,246,246,246,246,246,246,246,246,246,246,246,246,226
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246


BLANK:
db 239,246,239,246,239,246,239,246,239,246,239,246,239,246,239,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,238,239,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,238,239,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,238,239,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,238,239,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,238,239,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,238,239,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,238,239,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,238,246,238,246,238,246,238,246,238,246,238
db 246,238,246,238


RAISE:
db 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254
db 254,254,254,254,254,254,254,254,254,254,254,254,239,238,254,254,246,246
db 246,246,246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246
db 246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246,246,246
db 246,246,246,246,246,246,239,238,254,254,246,246,246,246,246,246,246,246
db 246,246,246,246,239,238,254,254,246,246,246,246,246,246,246,246,246,246
db 246,246,239,238,254,254,246,246,246,246,246,246,246,246,246,246,246,246
db 239,238,254,254,246,246,246,246,246,246,246,246,246,246,246,246,239,238
db 254,254,246,246,246,246,246,246,246,246,246,246,246,246,239,238,254,254
db 246,246,246,246,246,246,246,246,246,246,246,246,239,238,254,254,246,246
db 246,246,246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246
db 246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246,246,246
db 246,246,246,246,246,246,239,238,254,239,239,239,239,239,239,239,239,239
db 239,239,239,239,239,238,254,238,238,238,238,238,238,238,238,238,238,238
db 238,238,238,238




VacinityTable:
dd BLANK, NumberOne, NumberTwo, NumberThree, NumberFour
dd NumberFive, NumberFive, NumberFive, NumberFive



;**************
;    CODE
;**************

..start


	;initialize for our timer
	mov eax,82       ;timerinit
	mov ebx,1000     ;once each second receive a callback
	mov ecx,MyClock  ;our callback function name
	sysenter


	mov dword [clockrunning],0
	mov dword [timercounter],0


	;***********************
	;  Init Bomb Locations
	;***********************



.InitBombLocations:

	mov dword [showbombs],0 


	;zero out the bomb locations
	cld
	mov edi,BombLocation
	mov ecx,256
	mov eax,0
	repstosd   ;eax->[edi], edi+=4



	;compute 30 random BombLocations
	mov dword [index],-30  ;loop counter

.startsetbombLoop:
	
	mov eax,8  ;rand
	mov ebx,0  ;to get random num
	sysenter   ;return value in eax

	;now clip the random value to the range 0-256
	xor edx,edx     ;edx=0
	div dword [TwoFiftySix]  ;eax=eax/256
	;we use the remainder in edx

	mov BombLocation[edx],1   ;set BombLocation=1

	inc dword [index]  ;inc loop index

	js .startsetbombLoop  ;SF no longer set when index=0






	;***********************
	;compute vacinity values
	;***********************

	;we compute a vacinity value for each of the 256 cells
	;the vacinity value represents the qty of bombs touching that cell
	;there could be 8 bombs touching a cell 
	;top,bot,right,left,and 4 corners
	;but we only can display vacinity values up to 5
	;and I rarely see a value larger than 3

	
	;   i-17  | i-16 | i-15
	;------------------------
	;   i-1   |  i   | i+1
	;------------------------
	;   i+15  | i+16 | i+17



	;initialize all Vacinity[] to 0
	cld
	mov edi,Vacinity
	mov ecx,256
	mov eax,0
	repstosd




	mov dword [row],0
	mov dword [col],0

.computevacinityLoop:

	;ebx is col offset
	;eax is row offset


	;cell above i-16
	mov ebx,0
	mov eax,0xffffffff
	call BuildVacinity


	;cell below i+16
	mov ebx,0
	mov eax,1
	call BuildVacinity


	;cell left i-1
	mov ebx,0xffffffff
	mov eax,0
	call BuildVacinity

	
	;cell right i+1
	mov ebx,1
	mov eax,0
	call BuildVacinity


	;cell upper left i-17
	mov ebx,0xffffffff
	mov eax,0xffffffff
	call BuildVacinity


	;cell upper right i-15
	mov ebx,1
	mov eax,0xffffffff
	call BuildVacinity


	;cell lower left i+15
	mov ebx,0xffffffff
	mov eax,1
	call BuildVacinity


	;cell lower right i+17
	mov ebx,1
	mov eax,1
	call BuildVacinity


	;increment col
	inc dword [col]
	cmp dword [col],16
	jb .computevacinityLoop

	;increment row
	mov dword [col],0
	inc dword [row]
	cmp dword [row],16
	jb .computevacinityLoop









	;initialize all cells Display[] to "raised"
	cld
	mov edi,Display
	mov ecx,256
	mov eax,RAISE
	repstosd




	;**********
	;  DEBUG
	;*********

	;for debug comment out this jmp statement
	;this will show you all bombs and vacinity values on startup
     jmp .SkipDebug


	;for debug copy all Vacinity[] values to Display[]
	mov ecx,0
.copyvacinity:
	mov edi,Vacinity[ecx]
	push ecx
	mov ecx,edi
	mov edi,VacinityTable[ecx]
	pop ecx
	mov Display[ecx],edi
	inc ecx
	cmp ecx,256
	jb .copyvacinity

	;now for debug show bombs in Display[]
	mov ecx,0
.copybomb:
	mov ebx,BombLocation[ecx]
	cmp ebx,1
	jnz .copynobomb
	mov Display[ecx],BOMB
.copynobomb:
	inc ecx
	cmp ecx,256
	jb .copybomb


.SkipDebug:
	;end of debug statements





	call paint




.mainloop:



	;check for keyboard activity
	;******************************

	mov eax,12  ;checkc
	sysenter    ;al=ascii char
	jz .nokeypress
	

	cmp al,ESCAPE
	jz .quit

	;F1
	cmp al,F1
	jnz .noF1
	jmp .InitBombLocations
.noF1:

	;F2
	cmp al,F2
	jnz .noF2
	call HandleF2
	jmp .done
.noF2:

	;F3
	cmp al,F3
	jnz .noF3
	call HandleF3
	jmp .done
.noF3:
.nokeypress:




	;check for mouse activity
	;**************************
	
	mov eax,63  ;usbcheckmouse
	sysenter

	;Lbut down
	cmp al,1 
	jnz .noLeftMouse
	call HandleLeftMouse
	jmp .done
.noLeftMouse:

	;Mbut down
	cmp al,4
	jnz .noMiddleMouse
	call HandleMiddleMouse
	jmp .done
.noMiddleMouse:

	;Rbut down
	cmp al,2
	jnz .noRightMouse
	call HandleRightMouse
	jmp .done
.noRightMouse:
.nomouse:



	;this controls our clock
	mov eax,85  ;checktimer
	sysenter



.done:
	call paint
	jmp .mainloop


.quit:     ;this is program exit
	exit  ;return to tatOS






;**************
;    PAINT
;**************



paint:



	backbufclear



	;title of this game displayed with Hershey font
	mov eax,48   ;putshershey
	mov ebx,100  ;x
	mov ecx,100  ;y
	mov edx,str2 ;address of string
	mov esi,BLA  ;color
	mov edi,1    ;gothic
	mov ebp,3    ;scale factor
	sysenter



	;draw the menu string with game title
	fillrect 0,580,800,20,YEL
	puts FONT01,0,582,menu,0xeffd



	;display clock time value
	mov ebx,[timercounter]
	putebxdec ebx,600,582,0xf3fd,0




	;draw the grid of cells 16 across and 16 down

	;initialize
	mov ebx,XGRID  ;x location
	mov ecx,YGRID  ;y location
	mov dword [index],0

.rowLoop:

	;in this loop we must preserve ebx,ecx

	;get address of bitmap to display
	mov edx,[index]
	mov edi,Display[edx]


	;display the cell bitmap
	push ebx     ;preserve across tlib function call
	push ecx
	mov eax,68   ;putbits
	;ebx=x location
	;ecx=y location
	mov edx,16   ;width
	mov esi,16   ;height
	;edi=address of bitmap
	sysenter
	pop ecx
	pop ebx


	;increment for next cell in row
	inc dword [index]
	add ebx,16     ;inc col location
	cmp ebx,XGRIDMAX
	jb .rowLoop

	;increment for next row down
	mov ebx,XGRID  ;reset col location
	add ecx,16     ;increment row location
	cmp ecx,YGRIDMAX
	jb .rowLoop


.done:

	mov eax,62  ;arrowpointer
	sysenter

	swapbuf

	ret


  



;********************
;    HandleLeftMouse
;********************
        
;copy the Vacinity[] value to Display[]

HandleLeftMouse:

	call GetMouseIndex
	;return index of cell where mouse click occurs in ecx
	;set cf on success or clear cf if mouse click outside grid
	jnc .done

	;check for bomb
	;if bomb at Lclicked cell, then copy to Display
	mov eax,BombLocation[ecx]
	cmp eax,1
	jnz .vacinity
	;too bad, you clicked on a bomb :(
	mov Display[ecx],BOMB
	jmp .done
	

.vacinity:

	call SetDisplay2Vacinity

	;if edi=BLANK then call another function to
	;display all adjacent BLANK cells plus
	;vacinity value of border cells
	cmp edi,BLANK
	jnz .done
	call ShowBlankField

.done:
	ret




;********************
;    HandleMiddleMouse
;********************
        
HandleMiddleMouse:
	;no support for this
	ret



;********************
;    HandleRightMouse
;********************
        
;toggle flag
HandleRightMouse:

	call GetMouseIndex
	jnc .done

	mov eax,Display[ecx]
	cmp eax,FLAG
	jnz .flag

	;set Display to Raise
	mov Display[ecx],RAISE
	jmp .done

.flag:
	mov Display[ecx],FLAG
.done:
	ret






;**************************
;    Handle Function Keys
;**************************


;new game
HandleF1:

	ret





;show/noshow bombs
HandleF2:

	mov ecx,0

	cmp dword [showbombs],0
	ja .hidebombs


	;show bombs
.showbombs:
	mov eax,BombLocation[ecx]
	cmp eax,1
	jnz .nobomb
	mov Display[ecx],BOMB
.nobomb:
	inc ecx
	cmp ecx,256
	jb .showbombs
	jmp .done

	;hide bombs
.hidebombs:
	mov eax,Display[ecx]
	cmp eax,BOMB
	jnz .nobomb2hide
	mov Display[ecx],RAISE
.nobomb2hide:
	inc ecx
	cmp ecx,256
	jb .hidebombs

.done:
	;toggle
	not dword [showbombs]
	ret




;start/stop our clock
HandleF3:

	cmp dword [clockrunning],1
	jz .stop
	
	mov eax,83  ;timerstart
	sysenter
	mov dword [clockrunning],1
	jmp .done

.stop:
	mov eax,84  ;timerstop
	sysenter
	mov dword [clockrunning],0
	mov dword [timercounter],0  

.done:
	ret





;ecx=cell index
SetDisplay2Vacinity:

	push ecx
	mov ebx,ecx
	dumpebx ebx,str7,0   ;dump the cell index we received
	pop ecx

	push ecx
	mov ecx,Vacinity[ecx]
	mov edi,VacinityTable[ecx]
	pop ecx
	mov Display[ecx],edi

	ret




;********************************************************
;BuildVacinity
;retrieve the BombLocation value of that cell 
;and add it to the current cell
;ignore if row/col is out of range 0-15
;input
;ebx=col offset
;eax=row offset
;********************************************************

BuildVacinity:

	add ebx,[col]
	add eax,[row]

	call getcellindex
	;returns index in ecx, zf is set if index is valid
	jnz .done

	;get the bomb location value
	mov edx, BombLocation[ecx]
	;edx will hold 1=bomb and 0=nobomb

	push edx  ;perserve across tlib function call

	mov eax,75    ;xy2i
	mov ebx,[col] ;x
	mov ecx,[row] ;y
	mov edx,16    ;bmwidth
	sysenter      ;returns eax=index

	pop edx

	;save the bomb value
	add Vacinity[eax],edx

.done:
	ret







;******************************************************
;GetMouseIndex
;input:none
;return
;ecx=index of cell where mouse click occurred
;cf set on success, clear if mouse click outside grid
;*****************************************************

GetMouseIndex:

	mov eax,64  ;getmousexy
	sysenter    ;eax=mouseX, ebx=mouseY
	mov [mouseY],ebx

	;get COL of cell where mouse is located
	sub eax,XGRID
	xor edx,edx
	mov ecx,16
	div ecx
	mov ebx,eax
	;test if user clicks outside the grid
	cmp ebx,15
	ja .failure
	;save col
	mov [col],ebx


	dumpebx ebx,str5,0  ;dump the col


	;get ROW
	mov eax,[mouseY]
	sub eax,YGRID
	xor edx,edx
	mov ecx,16
	div ecx
	cmp eax,15
	ja .failure
	;save row
	mov [row],eax


	mov ebx,eax
	dumpebx ebx,str6,0  ;dump the row
	

	;convert COL/ROW to cell index where Lclick occurred
	mov eax,75    ;xy2i
	mov ebx,[col] ;x
	mov ecx,[row] ;y
	mov edx,16    ;bmwidth
	sysenter      ;eax=index


	push eax
	mov ebx,eax
	dumpebx ebx,str4,0  ;dump the cell index
	pop ecx 
	;ecx contains index of cell where Lclick occurred

.success:
	stc
	jmp .done
.failure:
	clc
.done:
	ret






;**************************************************
;getcellindex
;input
;ebx=col
;eax=row
;return
;ecx=array index
;zf is set if index is valid and clear if it is not
;***************************************************
getcellindex:

	push eax
	push ebx
	push esi


	;test for valid ROW index in range 0-15
	cmp eax,0
	jl .error
	cmp eax,15
	jg .error


	;test for valid COL index in range 0-15
	cmp ebx,0
	jl .error
	cmp ebx,15
	jg .error


	;convert row/col to cell index
	mov ecx,eax ;y
	mov eax,75  ;xy2i
	;ebx=x already
	mov edx,16  ;bmwidth
	sysenter    ;eax=return value

	mov ecx,eax ;return value in ecx
	xor ebx,ebx ;set zf

	jmp .done

.error:
	or ebx,1  ;clear zf
.done:
	pop esi
	pop ebx
	pop eax

	ret








;checktime will call this function every 1000ms
;to just increment a time counter
MyClock:
	inc dword [timercounter] 
	ret






;*****************************************************
;ShowBlankField
;function to find all adjacent blank cells
;this function is active if user Lclicks on blank cell
;algorithm is simto flood fill
;push top/bot/left/right onto stack
;if Vacinity[]==0 and Display[]==RAISE then set
;Display[]==BLANK
;*****************************************************

ShowBlankField:


	;push col and row of cell that was Lclicked
	;because it has to be a blank cell
	mov ebx,[col]
	mov [blankcellcol],ebx
	mov eax,[row]
	mov [blankcellrow],eax

	;ah contains the col and al contains the row
	mov ah,bl
	push eax
	mov dword [blankcellcount],1


	;now check for blank cells top/bot/left/right

.blankabove:

	;check for blank cell above
	mov ebx,[blankcellcol]
	mov eax,[blankcellrow]
	dec eax
	call getcellindex
	jnz .blankbelow

	;is Display raised ?
	;this check is needed to prevent 
	;putting the same blank cell back on the stack
	mov edx,Display[ecx]
	cmp edx,RAISE
	jnz .blankbelow

	;is vacinity blank ?
	mov edx,Vacinity[ecx]
	cmp edx,0
	jz .pushabove

	;cell is raised but not blank so display vacinity
	;this feature shows all vacinity values around the parimeter
	call SetDisplay2Vacinity
	jmp .blankbelow

.pushabove:
	;ah contains the col and al contains the row
	mov ah,bl
	;put cell coordinates onto stack
	push eax
	;and increment count
	inc dword [blankcellcount]


.blankbelow:

	mov ebx,[blankcellcol]
	mov eax,[blankcellrow]
	inc eax
	call getcellindex
	jnz .blankleft

	mov edx,Display[ecx]
	cmp edx,RAISE
	jnz .blankleft

	mov edx,Vacinity[ecx]
	cmp edx,0
	jz .pushbelow

	call SetDisplay2Vacinity
	jmp .blankleft

.pushbelow:
	mov ah,bl
	push eax
	inc dword [blankcellcount]



.blankleft:

	mov ebx,[blankcellcol]
	dec ebx
	mov eax,[blankcellrow]
	call getcellindex
	jnz .blankright

	mov edx,Display[ecx]
	cmp edx,RAISE
	jnz .blankright

	mov edx,Vacinity[ecx]
	cmp edx,0
	jz .pushleft

	call SetDisplay2Vacinity
	jmp .blankright

.pushleft:
	mov ah,bl
	push eax
	inc dword [blankcellcount]


.blankright:

	mov ebx,[blankcellcol]
	inc ebx
	mov eax,[blankcellrow]
	call getcellindex
	jnz .blankpop

	mov edx,Display[ecx]
	cmp edx,RAISE
	jnz .blankpop

	mov edx,Vacinity[ecx]
	cmp edx,0
	jz .pushright

	call SetDisplay2Vacinity
	jmp .blankpop

.pushright:
	mov ah,bl
	push eax
	inc dword [blankcellcount]


.blankpop:

	;pop off blank cell
	pop eax


	;extract the col and row
	mov ebx,eax
	shr eax,8
	mov [blankcellcol],eax
	mov bh,0
	mov [blankcellrow],ebx


	;set Display to BLANK
	mov ebx,[blankcellcol]
	mov eax,[blankcellrow]
	call getcellindex
	mov Display[ecx],BLANK


	;decrement count
	dec dword [blankcellcount]


	;we are done if count is 0
	cmp dword [blankcellcount],0
	jnz .blankabove
	

	ret
       





;****************TheEnd***************************************

       
