tatOS/apps/TCAD/README

July 2016

TCAD is a 2d cadd program for tatOS

This version supports:
   * TCD_SEGEMENT
   * TCD_TEXT
   * TCD_ARROW
   * TCD_BEZIER
   * export to tcd and pdf files


This README is a crash coarse on how to assemble and use tcad.


[1] read the sources 
main.s  = the main module and program entry are here
io.s    = read/write tcd files, export to pdf
seg.s   = code/data to draw segments/lines
txt.s   = code/data to draw text
aro.s   = code/data to draw arrows
bez.s   = code/data to draw beziers


[2] assemble, link & run
to generate the TCAD executable for tatOS, press F10 within tedit
this is an interactive make utility
press "l" to load a makefile
edit file names as desired
press "m" to make the TCAD executable

Finally ESC to tedit and press F11 to run the executable.




To Draw
**********
l = keyboard shortcut to draw line segments
b = keyboard shortcut to draw cubic beziers
a = keyboard shortcut to draw arrows
t = keyboard shortcut to draw text
o = keyboard shortcut to open a .tcd file
s = keyboard shortcut to save a .tcd file

Most object endpoints are defined with mouse clicks.
Follow the prompts at bottom of the screen
A few object endpoints can be defined/modified with keyboard input.

See the Draw menu for other object drawing options.



Yellow Box
***********
As you hover with the mouse, yellow boxes will be drawn around some
existing object points.  The yellow boxes can be used to attach other objects.



Pan/Zoom
**********
hold the middle mouse button down to pan
roll the mouse wheel to zoom in/out



Quit
*****
press F12 to quit TCAD



Link List
***********
All objects drawn by TCAD are stored in a double link list.
See function CreateBLink in main.s for the organization of each link.
You can dump all the links with dumpall or just those selected with 
dumpsel.



Popup Menu
*************
All selected objects have a popup menu that can be displayed with Rclick.
The allows you to modify the selected object. 
Only 1 object can be selected to invoke this menu.



Selection
************
Objects can be selected by:
   * Lclick on line type object 
   * Lclick within the bounding polygon for objects like bezier
   * drag box (Lclick upper left then lower right)
   * RIGHT or LEFT arrow keys will cycle thru the link list and select.
     The LEFT arrow will select the previous link.
     The RIGHT arrow will select the next link. 
	
Selected objects are shown with dashed lines.
Hit ESC to deselect all objects.



Slide Mode
*************
Slide mode allows the user to dynamically redefine an end point
or control point of an object that already exists. The dword stored 
within the link takes on the following values:
0xffffffff = disable slide mode
0 = redefine x1y1
1 = redefine x2y2
n = redefine xnyn
Slide mode is invoked by selecting an object then displaying the 
object popup menu with a Rclick, then selecting a point to redefine
(x1y1, x2,y2, xnyn).Exit slide mode with an Lclick to define the point 
location.



Markers
*********
Markers are little square boxes to indicate the location of object
endpoints and control points. The object starting point x1y1 
has a double box. Markers can be shown or hidden by selecting the 
object then Rclick->markers from the popup menu.



Delete
*********
To delete an object select it then hit Delete.



Escape Key
************
Unselect All.
Do not hit ESC in the middle of object creation (fixme tom).
 


pdf export
***********
Every TCAD object can be saved to a pdf file. This is an ascii text file.
The layer color is used as the pen color, but we reverse the black/white pen
since tcad draws on a black screen and the pdf file is written to a page with a 
white background.  Currently only solid lines are supported.
You must pan/zoom the graphics objects to fit the screen since we use an 800x600 
pdf "page" size that matches our graphics monitor, and object "screen coordinates" 
are exported to the pdf file not floating point coordinates. 




For Programmers
**************
A few notes about some key variables:

dword [CurrentObjectLink] holds address of a link in the list
that is currently being defined with the keyboard or mouse
address comes from a call to CreateBlankLink
after you are done creating the object
SaveKeyboardPoint or SaveMousePoint or Escape
will reset the [CurrentObjectLink] to 0


dword [FeedbackMessageIndex]
is used to display a paint message at the bottom of the screen
that guides/informs the user
feedback message strings may be added to the FeedbackMessageTable
the default feedback message index = 0 


public dword [LftMousProc]
a Left Mouse Handler is called with every left button down
the default left mouse handler is 0
since most operations are a sequence of Lclicks
all left mouse handlers must return a valid value in eax,ebx:
eax = feedback message index
ebx = new left mouse handler or 0 for default IdleLeftMouseHandler
or to set a new left mouse handler from any proc
secondary sources may write a valid address to
dword [LftMousProc]


public dword [EntrKeyProc]
an Enter Key Handler is called with every press of the ENTER key
the default enter key handler is 0
all enter key handlers must return a valid value in eax:
eax = feedback message index
to set a new enter key handler, secondary sources may 
write a valid address to dword [EntrKeyProc]


public dword [FlipKeyProc]
some operations may put an object in a position that is
90 or 180 deg from the desired position or offset to the wrong side. 
The flip key "f" can be programmed to flip the object
the default handler for the flip key is 0
there is no prompt for flip so just try it
to set a flip key handler, secondary sources may
write a valid address to dword [FlipKeyProc]


public dword [PassToPaint]
in order to execute a procedure immediately after a selection
secondary source files must write a valid proc address to
dword  [PassToPaint]
the way this works is as follows:
* assign dword [PassToPaint]
* assign the left mouse handler to 0 for default
* user makes a selection with Lclick
* IDLELEFTMOUSEHANDLER is executed
* IDLELEFTMOUSEHANDLER will pass on to PAINT the address indicated
* at the end of the first paint cycle the object is shown selected
  and then your procedure will be executed 1 time
see segment->Corner for an example of how this works
every "pass-handler-to-paint" procedure must set 
the following return values:
eax=feedback message index or 0 for default
ebx=idle left mouse handler or 0 for default
this is same as for the left mouse handlers


Thanks for trying TCAD.
Tom Timmermann
Janesville, WI 





