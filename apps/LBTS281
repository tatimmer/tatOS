
;*********************************************************************
;LITTLEBITS

;bts281.s   June 05, 2015 tat

;assembles with ttasm as flat binary for the tatOS operating system

;littlebits is a small bitmap editor
;this program is for making small bitmaps for fonts or whatever

;this version uses both ps2 keyboard and usb mouse for drawing

;you can use the arrow keys to move around a small cross cursor
;references to mousecol or mouserow refer to this cursor

;to set a single pixel, use the space bar

;to draw fast with the mouse hold the Ctrl key down and move the mouse
;no need to hold down any mouse buttons
;mouse Lclick will relocate the cross cursor at the mouse

;the usb mouse is used to access a dropdown menu from which you can
;use tlib to draw lines, circles... or set colors from the std palette

;draw lines and circles with two mouse Lclicks
;draw a 3 point curve with three mouse clicks

;to draw a semi-circular arc, the user is prompted to enter
;xc,yc,radius,angle_start,angle_end
;the angles must be unsigned dword 0->359 degrees

;wash just fills all pixels in the grid with the current color

;floodfill starts at the cross cursor and moves out in all directions
;setting pixels of the current color and only stops when a pixel of
;a differant color is detected or it reaches the border


;This version supports the tatOS BTS version 01 binary bitmap file
;the file format is defined in tatOS/tlib/bits.s
;3bytes: ascii 'BTS'
;byte:   version number (currently is 01)
;dword:  bmwidth
;dword:  bmheight
;dword:  palette type (0=tatOS std, 1=tatOS gray, 2=custom)
;then follow the bits, top down left->right
;This version also supports interchange of pixel data as ascii text
;to export the pixel data as an array of ascii text use COPY Ctrl+c
;in tedit just PASTE Ctrl+v to see the array of db asm code bytes
;you can also do the reverse copying the db byte array in tedit
;and pasting into littlebits 
;you must keep tract of the size of your array bmwidth x bmheight
;this version has a number of bitmaps assembled into the source
;as a db array of ascii text.

;since each bit is represented as a rect grid taking up 10x10 pixels
;a 50x50 size bitmap occupies 500x500 pixels on the screen 
;the SetGridSize function limits you to about a 50x50 pixel bitmap max

;bmwidth is the number of columns of cells/pixels
;bmheight is the number of rows of cells/pixels

;ltlmousecol and ltlmouserow define the cell/pixel that will get colored
;when the space bar is depressed

;if you want a transparent background wash/flood with 0xff color 
;and display the BITS file with puttransbits

;this program is written to use the stdpalette only
;do not use with gray or custom palettes for now (06/17/12)

;The "CurrentColor" and "PixelColor" are displayed on screen far right
;The numbers are the color index in the 256 color palette 
;first hex then dec
;the CurrentColor is what color is set when you press the spacebar
;the PixelColor is at the cross cursor which is moved with arrow keys






;code labels and keywords to navigate the code
;FileMenuDropdown
;DrawMenuDropdown
;MiscMenuDropdown
;Start
;paint
;checkc
;HandleLeftMouse
;HandleRight
;HandleLeft
;HandleUp
;HandleDown
;SetGridSize
;WashTheGrid
;ChooseColor
;DrawLine
;DrawCircle
;DrawArc
;Curve3P
;FloodFill
;OpenBTS1file
;SaveBTS1file
;ExportPixelsAsDB
;ImportDBasPixels
;maindone
;ltlSetPixel
;TotalQtyBits
;OpenBitsFile
;MirrorH
;MirrorV

;********************************************************************

org STARTOFEXE




;***************
;   DATA
;***************


;here we reserve 480,000 bytes for the littlebits imagebuffer
;this is a private pixel buffer used for this program
;still 800x600 pixels
equ IMAGEBUF,0x02100000

;here we reserve bytes for loading a BTS file or building one to save
equ LTLMEMORY,0x02200000

;memory for bitmap relocation and copy to/from clipboard
equ TEMPBUF,0x02300000


;the first row of the grid is drawn 25 pixels down
;to allow room for the top level drop down menu
equ ROW1OFFSET,25

;strings

menu1:
db 'F1=Open F2=Save F3=Grid F4=Wash F5=Color F6=Line '
db 'F7=Circle F8=Flood F9=mirror F10=move F11=Curve',0



str1: 
db '[Set Grid Size] bmwidth(5-70),bmheight(5-55)',0

str2: 
db '[FileSave] Enter unique BTS filename',0

str3:
db 'Copy bytes to CLIPBOARD as db asm code-done',0

str4:
db 'Open external binary file of bits with no header info',0

str5: 
db 'Failed to read BTS1-invalid BTS file',0

str6:
db 'Littlebits',0

str7: 
db '[Line] Enter x1,y1,x2,y2',0

str8: 
db '[Circle] Enter xc,yc,radius',0

str9: 
db 'To set pixels press space bar then arrow keys',0

str10:
db 'bmwidth*bmheight',0

str11:
db '[ImportDBbytesAsPixels] Enter bmwidth,bmheight',0

str12:
db 'xloc',0

str13:
db 'yloc',0

str14:
db 'PixelColor',0

str15:
db 'CurrentColor',0

str16:
db 'GridSize',0



str19:
db 'bmwidth',0

str20:
db 'bmheight',0

str21:
db 'qtybits',0

str23:
db 'value of ecx',0

str24:
db 'qty bytes received from clipboard',0

str25:
db 'max TEMPBUF address',0

str26:
db '[Curve3P] Enter x1,y1,x2,y2,x3,y3',0

str27:
db '[Arc] Enter xc,yc,radius,angle_start,angle_end',0

str28:
db '[MirrorV] Enter X_Vert_mirror_line,x1,y1,x2,y2',0

str29:
db '[MirrorH] Enter Y_Horiz_mirror_line,x1,y1,x2,y2',0

str30:
db '[CopyBits] Enter dx,dy,x1,y1,x2,y2',0

str31:
db '[fatwritefile] success',0


Flag1:
db 'Flag1',0
Flag2:
db 'Flag2',0
Flag3:
db 'Flag3',0
Flag4:
db 'Flag4',0





;dwords
ltlgridwidth:
dd 0
ltlgridheight:
dd 0
ltlmousecol:
dd 0
ltlmouserow:
dd 0
ltlXend:
dd 0
ltlYend:
dd 0
bmwidth:
dd 0
bmheight:
dd 0
qtybits:
dd 0
bmwidth_old:
dd 0
bmheight_old:
dd 0
row:
dd 0
col:
dd 0
qtybyteswritten:
dd 0
qtyclipboardbytes:
dd 0
maxtempbufaddress:
dd 0
doneparsing:
dd 0
Y_last_row:
dd 0
x1:
dd 0
y1:
dd 0
x2:
dd 0
y2:
dd 0
x3:
dd 0
y3:
dd 0
xc:
dd 0
yc:
dd 0
radius:
dd 0
mirror_line:
dd 0
temp:
dd 0
tempmousecol:
dd 0
DX:
dd 0
DY:
dd 0
DrawLineMousePicks:
dd 0
DrawCircleMousePicks:
dd 0
DrawCurve3PMousePicks:
dd 0


;memory used in a couple places in this program
Stor:
db0 100
Stor2:
db0 100

;for Curve3P and Curve5P which use subdivision
Source_Points:
db0 50


;for drawing arcs
ArcStruc:
db0 32


;current pixel color on Lclick
ltlcolor:
db RED

color:
db 0


;***************************
; FileMenuDropdown
;***************************

FileTitle:
db 'File',0
File1:
db 'Open',0
File2:
db 'Save',0

FileMenuStruc:
dd 0    ;id selected string
dd FileTitle
dd 0    ;x
dd 0    ;y
dd 99   ;w
dd 0    ;h
dd 0    ;xpose
dd 2    ;qty option strings
dd File1,File2

FileMenuProcTable:
dd OpenBTS1file, SaveBTS1file


;***************************
;DrawMenuDropdown
;***************************

DrawTitle:
db 'Draw',0
Draw1:
db 'line-l',0
Draw2:
db 'circle-c',0
Draw3:
db '3pt curve',0
Draw4:
db 'arc',0
Draw5:
db 'floodfill-f',0
Draw6:
db 'wash-w',0

DrawMenuStruc:
dd 0
dd DrawTitle
dd 100   ;x
dd 0
dd 99
dd 0
dd 0
dd 6     ;qty strings
dd Draw1,Draw2,Draw3,Draw4,Draw5,Draw6

DrawMenuProcTable:
dd DrawLine, DrawCircle, Curve3P, DrawArc, FloodFill, WashTheGrid

;***************************
;MiscMenuDropdown
;***************************

MiscTitle:
db 'misc',0
misc1:
db 'grid size',0
misc2:
db 'set color',0
misc3:
db 'copy',0
misc4:
db 'mirrorH',0
misc5:
db 'mirrorV',0

MiscMenuStruc:
dd 0
dd MiscTitle
dd 200   ;x
dd 0
dd 99
dd 0
dd 0
dd 5     ;qty strings
dd misc1,misc2,misc3,misc4,misc5

MiscMenuProcTable:
dd SetGridSize, ChooseColor, Copy, MirrorH, MirrorV





;this is our little cursor that is manipulated with arrow keys
;its a black cross with white inside 10x10 bitmap
MouseBox10x10:
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff
db 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef
db 0xfe ,0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe
db 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef, 0xef
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff
db 0xff, 0xff, 0xff, 0xef, 0xfe, 0xef, 0xff, 0xff, 0xff, 0xff



;these bitmap arrays were made in littlebits 
;after pressing COPY to save as ascii db asm code

;a red 9x9 bitmap rectangle
;the center of the bitmap is 4,4
;the bitmap is symmetric
Rectangle9x9:
db 251,251,251,251,251,251,251,251,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,251,251,251,251,251,251,251,251


;a red 9x9 bitmap cross
;the center of the bitmap is 4,4
;the bitmap is symmetric
Cross9x9:  
db 255,255,255,255,251,255,255,255,255
db 255,255,255,255,251,255,255,255,255
db 255,255,255,255,251,255,255,255,255
db 255,255,255,255,251,255,255,255,255
db 251,251,251,251,251,251,251,251,251
db 255,255,255,255,251,255,255,255,255
db 255,255,255,255,251,255,255,255,255
db 255,255,255,255,251,255,255,255,255
db 255,255,255,255,251,255,255,255,255


;a red 9x9 bitmap circle
;the center of the bitmap is 4,4
;the bitmap is symmetric
Circle9x9:
db 255,255,251,251,251,251,251,255,255
db 255,251,255,255,255,255,255,251,255
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 251,255,255,255,255,255,255,255,251
db 255,251,255,255,255,255,255,251,255
db 255,255,251,251,251,251,251,255,255


;a red 9x9 bitmap triangle
;the center of the bitmap is 4,4
;the bitmap is symmetric
Triangle9x9:
db 255,255,255,255,251,255,255,255,255
db 255,255,255,251,255,251,255,255,255
db 255,255,255,251,255,251,255,255,255
db 255,255,251,255,255,255,251,255,255
db 255,255,251,255,255,255,251,255,255
db 255,251,255,255,255,255,255,251,255
db 255,251,255,255,255,255,255,251,255
db 251,255,255,255,255,255,255,255,251
db 251,251,251,251,251,251,251,251,251



BoxCross9x9:
db 245,245,245,245,245,245,245,245,245,245,255,255,255,245,255,255,255,245
db 245,255,255,255,245,255,255,255,245,245,255,255,255,245,255,255,255,245
db 245,245,245,245,245,245,245,245,245,245,255,255,255,245,255,255,255,245
db 245,255,255,255,245,255,255,255,245,245,255,255,255,245,255,255,255,245
db 245,245,245,245,245,245,245,245,245



;a bunch of vertical stripes, primary colors
ManyStripes13x13:
db 253,251,250,249,248,247,246,245,244,243,242,241,240,253,251,250,249,248
db 247,246,245,244,243,242,241,240,253,251,250,249,248,247,246,245,244,243
db 242,241,240,253,251,250,249,248,247,246,245,244,243,242,241,240,253,251
db 250,249,248,247,246,245,244,243,242,241,240,253,251,250,249,248,247,246
db 245,244,243,242,241,240,253,251,250,249,248,247,246,245,244,243,242,241
db 240,253,251,250,249,248,247,246,245,244,243,242,241,240,253,251,250,249
db 248,247,246,245,244,243,242,241,240,253,251,250,249,248,247,246,245,244
db 243,242,241,240,253,251,250,249,248,247,246,245,244,243,242,241,240,253
db 251,250,249,248,247,246,245,244,243,242,241,240,253,251,250,249,248,247
db 246,245,244,243,242,241,240



;yellow cross and circle
BullsEye15x15:
db 255,255,255,255,255,253,253,253,253,253,255,255,255,255,255,255,255,255
db 253,253,255,255,253,255,255,253,253,255,255,255,255,255,253,255,255,255
db 255,253,255,255,255,255,253,255,255,255,253,255,255,255,255,255,253,255
db 255,255,255,255,253,255,255,253,255,255,255,255,255,253,255,255,255,255
db 255,253,255,253,255,255,255,255,255,255,253,255,255,255,255,255,255,253
db 253,255,255,255,255,255,255,253,255,255,255,255,255,255,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,255,255,255,255,255
db 255,253,255,255,255,255,255,255,253,253,255,255,255,255,255,255,253,255
db 255,255,255,255,255,253,255,253,255,255,255,255,255,253,255,255,255,255
db 255,253,255,255,253,255,255,255,255,255,253,255,255,255,255,255,253,255
db 255,255,253,255,255,255,255,253,255,255,255,255,253,255,255,255,255,255
db 253,253,255,255,253,255,255,253,253,255,255,255,255,255,255,255,255,253
db 253,253,253,253,255,255,255,255,255



;this is the cursive scriptT used by my grandmother Oma
scriptT20x20:
db 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240
db 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,255,255,240,255,255,255,255,255,255,255,255,255,255,255,255,240,255
db 255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,255,255,255
db 240,255,255,255,240,240,255,255,255,255,255,255,255,255,255,255,255,255
db 255,255,240,255,240,240,255,255,255,255,255,255,255,255,255,255,255,255
db 255,255,240,240,240,240,255,255,255,255,255,255,255,255,255,255,255,255
db 255,240,240,240,255,255,240,255,255,255,255,255,255,255,255,255,255,255
db 255,240,240,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255
db 255,255,240,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255
db 255,255,255,240,255,255,255,255,255,255,255,240,255,240,255,255,255,255
db 255,255,255,255,255,240,255,255,255,255,255,255,240,255,255,240,255,255
db 255,255,255,255,255,255,255,240,255,255,255,255,255,255,240,255,240,255
db 240,255,255,255,255,255,255,255,255,240,255,255,255,255,255,240,255,255
db 240,255,240,255,255,255,255,255,255,255,255,240,255,255,255,255,240,255
db 255,240,255,255,240,255,255,255,255,255,255,255,255,255,240,240,240,240
db 255,255,255,240,255,255,255,240,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,240,255,255,255,255,240,255,255,255,255,255,255,255,255
db 255,255,255,255,255,255,240,255,255,255,255,255,240,255,255,255,255,255
db 255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,255,255,255,240,240,255,255,255,255,255,255,255,255,255
db 255,255,255,255



;these number bitmaps plus the bomb etc are used in minesweeper
NumberOne16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,240,240,246,246,246,246,246,246,246,246,246,246,246,246,246,240,240
db 240,246,246,246,246,246,246,246,246,246,246,246,246,240,240,240,240,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,240,240,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,240,240,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,240,240,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,240,240,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,240,240,246,246,246,246,246,246,246,246,246,246,246
db 246,240,240,240,240,240,240,246,246,246,246,246,246,246,246,246,246,240
db 240,240,240,240,240,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246




NumberTwo16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,18,18,18,18,18,246,246,246,246,246,246,246,246,246,246,18,18
db 18,18,18,18,18,246,246,246,246,246,246,246,246,246,18,18,246,246
db 246,18,18,246,246,246,246,246,246,246,246,246,246,246,246,246,246,18
db 18,246,246,246,246,246,246,246,246,246,246,246,246,246,18,18,246,246
db 246,246,246,246,246,246,246,246,246,246,246,18,18,246,246,246,246,246
db 246,246,246,246,246,246,246,246,18,18,246,246,246,246,246,246,246,246
db 246,246,246,246,246,18,18,246,246,246,246,246,246,246,246,246,246,246
db 246,246,18,18,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 18,18,18,18,18,18,18,246,246,246,246,246,246,246,246,246,18,18
db 18,18,18,18,18,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246



NumberThree16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 243,243,243,243,243,243,243,246,246,246,246,246,246,246,246,246,243,243
db 243,243,243,243,243,243,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,243,243,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 243,243,246,246,246,246,246,246,246,246,246,246,246,243,243,243,243,246
db 246,246,246,246,246,246,246,246,246,246,246,243,243,243,243,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,243,243,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,243,243,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,243,243,246,246,246,246,246,246,246,246
db 243,243,243,243,243,243,243,243,246,246,246,246,246,246,246,246,243,243
db 243,243,243,243,243,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246



NumberFour16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,244,244
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,244,244,246,246
db 246,246,244,244,246,246,246,246,246,246,246,246,244,244,246,246,246,246
db 244,244,246,246,246,246,246,246,246,246,244,244,246,246,246,246,244,244
db 246,246,246,246,246,246,246,246,244,244,246,246,246,246,244,244,246,246
db 246,246,246,246,246,246,244,244,246,246,246,246,244,244,246,246,246,246
db 246,246,246,246,244,244,244,244,244,244,244,244,246,246,246,246,246,246
db 246,246,244,244,244,244,244,244,244,244,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,244,244,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,244,244,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246



NumberFive16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,250,250,250,250,250,250,250,246,246,246,246,246,246,246,246,250,250
db 250,250,250,250,250,250,246,246,246,246,246,246,246,246,250,250,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,250,250,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,250,250,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,250,250,250,250,250,250,250,246,246,246
db 246,246,246,246,246,246,250,250,250,250,250,250,250,250,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,250,250,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,250,250,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,250,250,246,246,246,246,246,246,246,246,250,250
db 250,250,250,250,250,250,246,246,246,246,246,246,246,246,250,250,250,250
db 250,250,250,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246


RedFlag16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,251,251,246,246,246,246,246,246,246,246,246,246,246,246
db 246,251,251,251,246,246,246,246,246,246,246,246,246,246,246,246,251,251
db 251,251,246,246,246,246,246,246,246,246,246,246,246,251,251,251,251,251
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,239,239,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,239,239,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,239,239,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,239,239,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,239,239,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,239,239,246,246,246,246,246,246,246,246,246,246,246,246
db 239,239,239,239,239,239,246,246,246,246,246,246,246,246,246,239,239,239
db 239,239,239,239,239,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246


Bomb16x16:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,226,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,226,226,226,246,246,246,246,246,246,246,246,246,246,246,246,246
db 226,226,226,246,246,246,246,246,246,246,246,246,246,246,239,239,239,239
db 239,239,239,246,246,246,246,246,246,246,246,246,239,254,254,239,239,239
db 239,246,246,246,246,246,246,246,226,226,239,254,239,239,239,239,239,226
db 226,246,246,246,246,226,226,226,239,239,239,239,239,239,239,226,226,226
db 246,246,246,246,226,226,239,239,239,239,239,239,239,226,226,246,246,246
db 246,246,246,246,239,239,239,239,239,239,239,246,246,246,246,246,246,246
db 246,246,239,239,239,239,239,239,239,246,246,246,246,246,246,246,246,246
db 246,246,226,226,226,246,246,246,246,246,246,246,246,246,246,246,246,246
db 226,226,226,246,246,246,246,246,246,246,246,246,246,246,246,246,246,226
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246


BlankCell16x16:
db 239,246,239,246,239,246,239,246,239,246,239,246,239,246,239,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,238,239,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,238,239,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,238,239,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,238,239,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,238,239,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,238,239,246,246,246,246,246
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,238,239,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246,246,238,246,238,246,238,246,238,246,238,246,238
db 246,238,246,238


RaisedCell16x16:
db 254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254
db 254,254,254,254,254,254,254,254,254,254,254,254,239,238,254,254,246,246
db 246,246,246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246
db 246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246,246,246
db 246,246,246,246,246,246,239,238,254,254,246,246,246,246,246,246,246,246
db 246,246,246,246,239,238,254,254,246,246,246,246,246,246,246,246,246,246
db 246,246,239,238,254,254,246,246,246,246,246,246,246,246,246,246,246,246
db 239,238,254,254,246,246,246,246,246,246,246,246,246,246,246,246,239,238
db 254,254,246,246,246,246,246,246,246,246,246,246,246,246,239,238,254,254
db 246,246,246,246,246,246,246,246,246,246,246,246,239,238,254,254,246,246
db 246,246,246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246
db 246,246,246,246,246,246,246,246,239,238,254,254,246,246,246,246,246,246
db 246,246,246,246,246,246,239,238,254,239,239,239,239,239,239,239,239,239
db 239,239,239,239,239,238,254,238,238,238,238,238,238,238,238,238,238,238
db 238,238,238,238




Spire17x30:
db 246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246
db 255,255,255,255,255,255,255,246,255,255,255,255,255,255,255,246,246,255
db 255,255,255,255,255,246,255,246,255,255,255,255,255,255,246,246,255,255
db 255,255,255,246,255,255,255,246,255,255,255,255,255,246,246,255,255,255
db 255,246,255,255,255,255,255,246,255,255,255,255,246,246,255,255,255,255
db 246,255,255,255,255,255,246,255,255,255,255,246,246,255,255,255,255,255
db 246,255,255,255,246,255,255,255,255,255,246,246,255,255,255,255,255,255
db 246,255,246,255,255,255,255,255,255,246,246,255,255,246,246,255,255,246
db 255,246,255,255,246,246,255,255,246,246,255,246,255,255,246,255,246,255
db 246,255,246,255,255,246,255,246,246,255,246,255,255,246,255,246,255,246
db 255,246,255,255,246,255,246,246,255,246,255,255,246,255,246,255,246,255
db 246,255,255,246,255,246,246,255,246,255,255,246,255,246,255,246,255,246
db 255,255,246,255,246,246,255,246,255,255,246,255,246,255,246,255,246,255
db 255,246,255,246,246,255,246,255,255,246,255,246,255,246,255,246,255,255
db 246,255,246,246,255,246,255,255,246,255,246,255,246,255,246,255,255,246
db 255,246,246,255,246,255,255,246,255,246,255,246,255,246,255,255,246,255
db 246,246,255,246,255,255,246,255,246,255,246,255,246,255,255,246,255,246
db 246,255,246,255,255,246,255,246,255,246,255,246,255,255,246,255,246,246
db 255,246,255,255,255,246,246,255,246,246,255,255,255,246,255,246,246,255
db 246,255,255,255,255,246,255,246,255,255,255,255,246,255,246,246,255,255
db 246,255,255,255,255,255,255,255,255,255,246,255,255,246,246,255,255,255
db 246,246,246,246,255,246,246,246,246,255,255,255,246,246,255,255,255,255
db 255,255,246,255,246,255,255,255,255,255,255,246,246,255,255,255,255,255
db 255,246,255,246,255,255,255,255,255,255,246,246,255,255,255,255,255,255
db 246,255,246,255,255,255,255,255,255,246,246,255,255,255,255,255,255,246
db 255,246,255,255,255,255,255,255,246,246,255,255,255,255,255,255,246,255
db 246,255,255,255,255,255,255,246,246,255,255,255,255,255,255,246,255,246
db 255,255,255,255,255,255,246,246,246,246,246,246,246,246,246,246,246,246
db 246,246,246,246,246,246




Cross21x30:
db 255,255,255,255,255,255,255,239,239,239,239,239,239,239,255,255,255,255
db 255,255,255,255,255,255,255,255,255,255,239,253,253,253,253,253,239,255
db 255,255,255,255,255,255,255,255,255,255,255,255,255,239,253,241,241,241
db 253,239,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,253
db 241,239,241,253,239,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,239,253,241,239,241,253,239,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,239,253,241,239,241,253,239,255,255,255,255,255,255,255
db 255,255,255,255,255,255,255,239,253,241,239,241,253,239,255,255,255,255
db 255,255,255,255,255,255,255,255,255,255,239,253,241,239,241,253,239,255
db 255,255,255,255,255,255,239,239,239,239,239,239,239,239,253,241,239,241
db 253,239,239,239,239,239,239,239,239,239,253,253,253,253,253,253,253,253
db 241,239,241,253,253,253,253,253,253,253,253,239,239,253,241,241,241,241
db 241,241,241,241,239,241,241,241,241,241,241,241,241,253,239,239,253,241
db 239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,241,253,239
db 239,253,241,241,241,241,241,241,241,241,239,241,241,241,241,241,241,241
db 241,253,239,239,253,253,253,253,253,253,253,253,241,239,241,253,253,253
db 253,253,253,253,253,239,239,239,239,239,239,239,239,239,253,241,239,241
db 253,239,239,239,239,239,239,239,239,255,255,255,255,255,255,255,239,253
db 241,239,241,253,239,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,239,253,241,239,241,253,239,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,239,253,241,239,241,253,239,255,255,255,255,255,255,255
db 255,255,255,255,255,255,255,239,253,241,239,241,253,239,255,255,255,255
db 255,255,255,255,255,255,255,255,255,255,239,253,241,239,241,253,239,255
db 255,255,255,255,255,255,255,255,255,255,255,255,255,239,253,241,239,241
db 253,239,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,253
db 241,239,241,253,239,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,239,253,241,239,241,253,239,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,239,253,241,239,241,253,239,255,255,255,255,255,255,255
db 255,255,255,255,255,255,255,239,253,241,239,241,253,239,255,255,255,255
db 255,255,255,255,255,255,255,255,255,255,239,253,241,239,241,253,239,255
db 255,255,255,255,255,255,255,255,255,255,255,255,255,239,253,241,239,241
db 253,239,255,255,255,255,255,255,255,255,255,255,255,255,255,255,239,253
db 241,241,241,253,239,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,239,253,253,253,253,253,239,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,239,239,239,239,239,239,239,255,255,255,255,255,255,255





Smily31x31:
db 255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,253,253,253
db 253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,253,253,253,253,253,253,253,253,253,253,253,253,253,255
db 255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,255,255,255,255
db 255,255,255,255,255,255,255,255,255,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,255,255,255,255,255,255,255,255
db 255,255,255,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,255,255,255,255,255,255,255,255,255,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,255,255,255,255,255,255,255,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,255,255
db 255,255,255,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,255,255,255,255,253,253
db 253,253,253,253,253,239,239,239,253,253,253,253,253,253,253,239,239,239
db 253,253,253,253,253,253,253,255,255,255,253,253,253,253,253,253,253,253
db 239,239,239,253,253,253,253,253,253,253,239,239,239,253,253,253,253,253
db 253,253,253,255,255,253,253,253,253,253,253,253,253,239,239,239,253,253
db 253,253,253,253,253,239,239,239,253,253,253,253,253,253,253,253,255,255
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,255,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,239,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,239,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,239
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,239,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,239,253,253,253,253
db 253,253,253,253,253,253,253,253,253,239,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,239,239,253,253,253,253,253,253,253,253
db 253,253,253,239,239,253,253,253,253,253,253,253,253,255,253,253,253,253
db 253,253,253,239,253,239,253,253,253,253,253,253,253,253,253,239,253,239
db 253,253,253,253,253,253,253,255,255,253,253,253,253,253,253,253,253,239
db 253,239,239,239,239,239,239,239,239,239,253,239,253,253,253,253,253,253
db 253,253,255,255,253,253,253,253,253,253,253,253,253,239,253,253,253,253
db 253,253,253,253,253,239,253,253,253,253,253,253,253,253,253,255,255,255
db 253,253,253,253,253,253,253,253,253,239,239,239,239,239,239,239,239,239
db 253,253,253,253,253,253,253,253,253,255,255,255,255,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,255,255,255,255,255,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,255,255
db 255,255,255,255,255,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,255,255,255,255,255,255,255,255
db 255,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253
db 253,253,253,253,255,255,255,255,255,255,255,255,255,255,255,253,253,253
db 253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,255,255
db 255,255,255,255,255,255,255,255,255,255,255,253,253,253,253,253,253,253
db 253,253,253,253,253,253,253,253,253,253,255,255,255,255,255,255,255,255
db 255,255,255,255,255,255,255,255,253,253,253,253,253,253,253,253,253,253
db 253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
db 255,255,255,255,255,255,253,253,253,253,253,253,253,255,255,255,255,255
db 255,255,255,255,255,255,255






;***********************
;       CODE
;***********************


start

	;initialize
	mov dword [bmwidth],30
	mov dword [bmheight],30
	mov dword [ltlgridwidth],300
	mov dword [ltlgridheight],300
	mov dword [ltlmousecol],0
	mov dword [ltlmouserow],0



	;set all pixels in our private buffer to white
	;every time you press the space bar a byte value is set here
	;max file size with 80x60 image is 4000 bits
	cld
	mov edi,IMAGEBUF
	mov ecx,5000
	mov al,WHI
	repstosb


	mov eax,105  ;dropdowncreate
	mov ebx,FileMenuStruc
	sysenter

	mov eax,105  ;dropdowncreate
	mov ebx,DrawMenuStruc
	sysenter

	mov eax,105  ;dropdowncreate
	mov ebx,MiscMenuStruc
	sysenter





	;********************
	;    PAINT
	;********************


paint:

	backbufclear


	;set the color of the non-drawable background
	;to distinguish non-drawable area from bitmap border
	fillrect 0,0,800,600,BLA



	;draw the grid of rectangular "BITS"
	;each rect is 8x8 pixels with 2 pixel space between
	mov dword [col],0           ;x
	mov dword [row],ROW1OFFSET  ;y
	mov edi,IMAGEBUF            ;address of bits
	mov eax,[ltlgridheight]
	add eax,ROW1OFFSET
	mov [Y_last_row],eax

.paintrow:


	push edi  ;preserve address of bit across tlib function call

	mov eax,6     ;fillrect
	mov ebx,[col]
	mov ecx,[row]
	mov edx,8      ;each square is 8x8
	mov esi,8
	mov edi,[edi]  ;color of square
	sysenter

	pop edi
	inc edi

	add dword [col],10  ;move right
	mov eax,[col]
	cmp eax,[ltlgridwidth]
	jb .paintrow

	;reset x and mov y down
	mov dword [col],0   ;far left
	add dword [row],10  ;move down
	mov eax,[row]
	cmp eax,[Y_last_row]
	jb .paintrow






	;display some sample bitmaps along the bottom
	;the args for puttransbits are x,y,width,height,AddressOfBits

	puttransbits   0,550,9,9,Rectangle9x9
	puttransbits  20,550,9,9,Cross9x9
	puttransbits  40,550,9,9,Circle9x9
	puttransbits  60,550,9,9,Triangle9x9
	puttransbits  80,550,9,9,BoxCross9x9
	puttransbits 100,550,13,13,ManyStripes13x13
	puttransbits 125,550,15,15,BullsEye15x15


	;scriptT bits are dark blue but it doesnt show up well
	;on a black background, so we use putmonobits and color light blue
	mov eax,66   ;putmonobits
	mov ebx,175  ;x
	mov ecx,550  ;y
	mov edx,20   ;bmwidth
	mov esi,20   ;bmheight
	mov edi,scriptT20x20
	mov ebp,LBL  ;color
	sysenter



	;some more bitmaps to display along the bottom
	puttransbits 250,550,16,16,NumberOne16x16
	puttransbits 275,550,16,16,NumberTwo16x16
	puttransbits 300,550,16,16,NumberThree16x16
	puttransbits 325,550,16,16,NumberFour16x16
	puttransbits 350,550,16,16,NumberFive16x16
	puttransbits 375,550,16,16,RedFlag16x16
	puttransbits 400,550,16,16,Bomb16x16
	puttransbits 425,550,16,16,BlankCell16x16
	puttransbits 450,550,16,16,RaisedCell16x16
	puttransbits 475,550,17,30,Spire17x30
	puttransbits 500,550,21,30,Cross21x30
	puttransbits 525,550,31,31,Smily31x31



	;info displayed along the right edge of the screen
	;***************************************************


	;display the title of this program in Hershey Gothic font
	putshershey 600,250,str6,YEL,1,1



	;display the current grid size
	puts FONT01,600,300,str16,0xfeff  ;string tag
	putebxdec [bmwidth],730,300,0xfeff,0
	putebxdec [bmheight],775,300,0xfeff,0



	;display the current setpixel color when you press the space bar
	movzx ebx,[ltlcolor]
	putebx    ebx,730,325,0xfeff,2   ;as hex
	putebxdec ebx,765,325,0xfeff,0   ;as dec
	puts      FONT01,570,325,str15,0xfeff
	movzx edi,byte [ltlcolor]
	fillrect  700,325,10,10,edi



	;display the color of the pixel at the cursor
	mov eax,[ltlmouserow]
	mov ebx,[bmwidth]
	mul ebx
	add eax,[ltlmousecol]
	mov edi,IMAGEBUF
	add edi,eax
	mov eax,[edi]
	and eax,0xff
	mov ebx,eax
	push ebx
	putebx    ebx,730,350,0xfeff,2  ;as hex
	putebxdec ebx,765,350,0xfeff,0  ;as dec
	puts      FONT01,590,350,str14,0xfeff
	pop edi
	fillrect  700,350,10,10,edi



	;display the x,y coordinate of the cross/cursor
	mov ebx,[ltlmousecol]
	putebxdec ebx,730,375,0xfeff,0   ;xloc
	puts FONT01,650,375,str12,0xfeff

	mov ebx,[ltlmouserow]         ;yloc
	putebxdec ebx,730,400,0xfeff,0
	puts FONT01,650,400,str13,0xfeff
	


	;display the bitmap full size
	;initially you see a white rectangle
	;but if you wash this with color 0xff
	;then all you see is the black background of the littlebits 
	mov eax,65   ;puttransbits
	mov ebx,730  ;x
	mov ecx,430  ;y
	mov edx,[bmwidth]
	mov esi,[bmheight]
	mov edi,IMAGEBUF
	sysenter




	;draw the cross/cursor 
	;its a 10x10 cross bitmap manipulated with the arrow keys
	;compute x = col * 10 and save in ecx
	mov ebx,10
	mov eax,[ltlmousecol]
	mul ebx
	push eax  ;x
	;compute Y = row * 10 and save in eax
	mov ebx,10
	mov eax,[ltlmouserow]
	mul ebx
	add eax,ROW1OFFSET
	mov ecx,eax  ;y
	;draw the red cross/cursor
	mov eax,65   ;puttransbits
	pop ebx      ;x
	;ecx=y already
	mov edx,10   ;width
	mov esi,10   ;height
	mov edi,MouseBox10x10  ;address of bits
	sysenter




	;color a pixel with the mouse 
	;only if the CTRL key is down and mouse is within grid
	;user does not have to Lclick for this
	mov eax,33         ;getkeystate
	mov ebx,0          ;CTRL key
	sysenter           ;returns eax=1 if down
	cmp eax,1
	jnz .doneMousePaint

	mov eax,64         ;getmousexy
	sysenter           ;returns eax=mouseX, ebx=mouseY

	mov [temp],ebx     ;save mousey for later

	;compute col that mouse is in
	xor edx,edx
	mov ebx,10
	div ebx                ;eax=col number that mouse is in
	cmp eax,[bmwidth]
	jae .doneMousePaint    ;mouse click right of grid
	mov [ltlmousecol],eax  ;define new mouse col

	;compute row that mouse is in
	xor edx,edx
	mov ebx,10
	mov eax,[temp]     ;eax=mousey
	sub eax,ROW1OFFSET
	div ebx            ;eax=row number that mouse is in
	cmp eax,[bmheight]
	jae .doneMousePaint
	mov [ltlmouserow],eax

	;now set pixel
	call ltlSetPixel

.doneMousePaint:





	mov eax,106   ;dropdownpaint
	mov ebx,FileMenuStruc
	sysenter

	mov eax,106   ;dropdownpaint
	mov ebx,DrawMenuStruc
	sysenter

	mov eax,106   ;dropdownpaint
	mov ebx,MiscMenuStruc
	sysenter

	mov eax,62  ;arrowpointer
	sysenter

	swapbuf  ;make it show up


	;****************
	;   ENDPAINT
	;****************



	checkc
	jz .donekeypress
	
	cmp al,ESCAPE
	jz maindone
	cmp al,SPACE
	jz HandleSpacebar
	cmp al,RIGHT
	jz HandleRight
	cmp al,LEFT
	jz HandleLeft
	cmp al,UP
	jz HandleUp
	cmp al,DOWN
	jz HandleDown
	cmp al,COPY
	jz ExportPixelsAsDB
	cmp al,PASTE
	jz ImportDBasPixels
	cmp al,99    ;'c' 
	jz DrawCircle
	cmp al,102   ;'f' 
	jz FloodFill
	cmp al,108   ;'l' 
	jz DrawLine
	cmp al,119   ;'w' 
	jz WashTheGrid


.donekeypress:

	mov eax,63  ;usbcheckmouse
	sysenter
	cmp al,1    ;Lclick
	jz HandleLeftMouse

	jmp paint
	;end of app_main_loop





HandleLeftMouse:

	;check for "File" menu selection
	mov eax,[FileMenuStruc]
	cmp eax,-1
	jz .doneFileMenu
	mov ebx,FileMenuProcTable[eax]  ;get proc address
	jmp ebx ;and jmp to that proc 
.doneFileMenu:

	;check for "Draw" menu selection
	mov eax,[DrawMenuStruc]
	cmp eax,-1
	jz .doneDrawMenu
	mov ebx,DrawMenuProcTable[eax]  ;get proc address
	jmp ebx ;and jmp to that proc 
.doneDrawMenu:

	;check for "misc" menu selection
	mov eax,[MiscMenuStruc]
	cmp eax,-1
	jz .doneMiscMenu
	mov ebx,MiscMenuProcTable[eax]  ;get proc address
	jmp ebx ;and jmp to that proc 
.doneMiscMenu:



	;redefine ltlmousecol, ltlmouserow with the Lclick
	;mouse must be within the grid
	mov eax,64         ;getmousexy
	sysenter           ;returns eax=mouseX, ebx=mouseY
	mov [temp],ebx     ;save mousey for later

	;compute col that mouse is in
	xor edx,edx
	mov ebx,10             ;each grid square is 10 pixel wide do /10
	div ebx                ;eax=col number that mouse is in
	cmp eax,[bmwidth]      ;test if mouse is to right of grid
	jae paint              ;mouse click right of grid
	mov [tempmousecol],eax ;save mouse col #

	;compute row that mouse is in
	xor edx,edx
	mov ebx,10
	mov eax,[temp]     ;eax=mousey
	sub eax,ROW1OFFSET
	div ebx            ;eax=row number that mouse is in
	cmp eax,[bmheight]
	jae paint          ;mouse click below grid

	;redefine cross cursor at mouse
	mov [ltlmouserow],eax
	mov eax,[tempmousecol]
	mov [ltlmousecol],eax 



	;Line Drawing via Lclicks
	;if we are drawing a line with mouse picks
	;DrawLineMousePicks=0  dont draw a line
	;DrawLineMousePicks is set to 1 after menu selection to draw line
	;then we save x1,y1 and set DrawLineMousePicks=2
	;then we save x2,y2 and jump to DrawLine
	cmp dword [DrawLineMousePicks],0
	jz .doneLineDwgMousePicks
	cmp dword [DrawLineMousePicks],1
	jz .savex1y1
	cmp dword [DrawLineMousePicks],2
	jz .savex2y2

.savex1y1:
	mov eax,[ltlmouserow]
	mov [y1],eax
	mov eax,[ltlmousecol]
	mov [x1],eax
	mov dword [DrawLineMousePicks],2
	jmp paint
.savex2y2:
	mov eax,[ltlmouserow]
	mov [y2],eax
	mov eax,[ltlmousecol]
	mov [x2],eax
	mov dword [DrawLineMousePicks],0
	jmp NowDrawLine
.doneLineDwgMousePicks:





	;Circle Drawing via Lclicks
	cmp dword [DrawCircleMousePicks],0
	jz .doneCircleDwgMousePicks
	cmp dword [DrawCircleMousePicks],1
	jz .savex1y1Circle
	cmp dword [DrawCircleMousePicks],2
	jz .savex2y2Circle

.savex1y1Circle:
	mov eax,[ltlmouserow]
	mov [y1],eax
	mov eax,[ltlmousecol]
	mov [x1],eax
	mov dword [DrawCircleMousePicks],2
	jmp paint
.savex2y2Circle:
	mov eax,[ltlmouserow]
	mov [y2],eax
	mov eax,[ltlmousecol]
	mov [x2],eax
	mov dword [DrawCircleMousePicks],0
	jmp NowDrawCircle
.doneCircleDwgMousePicks:





	;Curve3P Drawing via Lclicks
	cmp dword [DrawCurve3PMousePicks],0
	jz .doneCurve3PDwgMousePicks
	cmp dword [DrawCurve3PMousePicks],1
	jz .savex1y1Curve3P
	cmp dword [DrawCurve3PMousePicks],2
	jz .savex2y2Curve3P
	cmp dword [DrawCurve3PMousePicks],3
	jz .savex3y3Curve3P

.savex1y1Curve3P:
	mov eax,[ltlmouserow]
	mov [y1],eax
	mov eax,[ltlmousecol]
	mov [x1],eax
	mov dword [DrawCurve3PMousePicks],2
	jmp paint
.savex2y2Curve3P:
	mov eax,[ltlmouserow]
	mov [y2],eax
	mov eax,[ltlmousecol]
	mov [x2],eax
	mov dword [DrawCurve3PMousePicks],3
	jmp paint
.savex3y3Curve3P:
	mov eax,[ltlmouserow]
	mov [y3],eax
	mov eax,[ltlmousecol]
	mov [x3],eax
	mov dword [DrawCurve3PMousePicks],0
	jmp NowDrawCurve3Points
.doneCurve3PDwgMousePicks:





	jmp paint
	;done HandleLeftMouse



	
HandleRight:

	mov eax,[bmwidth]
	dec eax

	;prevent moving off the bitmap grid
	cmp eax,[ltlmousecol]
	jbe .doneRight

	inc dword [ltlmousecol]

	;set pixel if spacebar is down
	mov eax,33  ;getkeystate
	mov ebx,3   ;SPACE key
	sysenter    ;returns 1 if down

	cmp eax,0
	jz .doneRight
	call ltlSetPixel

.doneRight:
	jmp paint



HandleLeft:
	cmp dword [ltlmousecol],0
	jz .doneLeft
	dec dword [ltlmousecol]
	;set pixel if spacebar is down
	mov eax,33  ;getkeystate
	mov ebx,3   ;SPACE key
	sysenter    ;returns 1 if down
	cmp eax,0
	jz .doneLeft
	call ltlSetPixel
.doneLeft:
	jmp paint



HandleUp:
	cmp dword [ltlmouserow],0
	jz .doneUp
	dec dword [ltlmouserow]
	;set pixel if spacebar is down
	mov eax,33  ;getkeystate
	mov ebx,3   ;SPACE key
	sysenter    ;returns 1 if down
	cmp eax,0
	jz .doneUp
	call ltlSetPixel
.doneUp:
	jmp paint



HandleDown:
	mov eax,[bmheight]
	dec eax
	cmp eax,[ltlmouserow]
	jz .doneDown
	inc dword [ltlmouserow]

	;set pixel if spacebar is down
	mov eax,33  ;getkeystate
	mov ebx,3   ;SPACE key
	sysenter    ;returns 1 if down

	cmp eax,0
	jz .doneDown

	call ltlSetPixel

.doneDown:
	jmp paint




HandleSpacebar:
	call ltlSetPixel
	jmp paint




OpenBTS1file:

	;open filemanager so user can select a file
	mov eax,73  ;filemanager
	sysenter
	jz .doneOpen
	

	;read in the file 
	mov eax,72  ;fatreadfile
	mov ebx,LTLMEMORY
	sysenter
	cmp eax,0
	jz .doneOpen


	;check the first 4 bytes are "BTS",0x01
	mov esi,LTLMEMORY
	cmp byte [esi],66  ;B
	jnz .headerError
	inc esi
	cmp byte [esi],84  ;T
	jnz .headerError
	inc esi
	cmp byte [esi],83  ;S
	jnz .headerError
	inc esi
	cmp byte [esi],0x01 ;version=01
	jnz .headerError
	inc esi
	jmp .fileIsBTS


.headerError:

	;display warning message that file is not bits
	mov eax,69  ;putspause
	mov ebx,str5
	sysenter
	jmp .doneOpen


.fileIsBTS:

	;save bmwidth
	mov eax,[esi]
	mov [bmwidth],eax

	;save bmheight
	add esi,4
	mov eax,[esi]
	mov [bmheight],eax

	;compute new gridwidth = 10 times bmwidth
	xor edx,edx
	mov eax,[bmwidth]
	mov ebx,10
	mul ebx
	mov [ltlgridwidth],eax

	;compute new gridheight = 10 times bmheight
	xor edx,edx
	mov eax,[bmheight]
	mul ebx
	mov [ltlgridheight],eax

	;compute total qty bits
	call TotalQtyBits

	;check palette type and set palette ??

	;transfer bits to IMAGEBUF
	add esi,8
	mov edi,IMAGEBUF
	mov ecx,eax
	cld
	repmovsb

.doneOpen:
	jmp paint





SaveBTS1file:

	;compute total qty bits
	call TotalQtyBits


	;build the BTS file in memory at LTLMEMORY
	cld
	mov edi,LTLMEMORY
	mov al,66   ;B
	stosb       ;edi++
	mov al,84   ;T
	stosb       ;edi++
	mov al,83   ;S
	stosb       ;edi++
	mov al,0x01
	stosb       ;edi+=
	

	;write bmwidth
	mov eax,[bmwidth]
	stosd        ;edi+=4


	;write bmheight
	mov eax,[bmheight]
	stosd        ;edi+=4


	;palette type, we assume stdpalette for now, palettetype=0
	mov eax,0
	stosd        ;edi+=4


	;copy the bits
	cld
	mov esi,IMAGEBUF
	;edi is set
	mov ecx,[qtybits]
	repmovsb



	;prompt for unique 11char filename, 
	;filename string is stored at COMPROMPTBUF in kernel
	mov eax,70    ;fatgetfilename
	mov ebx,str2  ;prompt string
	sysenter
	jnz .doneSave


	;compute filesize=qtybits + 16 for the header
	mov eax,[qtybits]
	add eax,16
	mov ecx,eax  ;qty bytes in file


	;save the file to flash
	mov eax,71         ;fatwritefile
	mov ebx,LTLMEMORY  ;address of file data
	;ecx filesize is set just above
	sysenter           ;eax=0 on success

	;if this fails fatwritefile will call putpause error message
	cmp eax,0
	jnz .doneSave

	mov eax,69   ;putspause
	mov ebx,str31
	sysenter

.doneSave:
	jmp paint




;************************************************************
;SetGridSize
;here you can set the bmwidth and bmwidth
;before starting to draw
;you can also resize the grid after drawing
;if you shrink bmwidth the visible pixels will be clipped
;if you expand bmwidth or bmheight
;the additional rows and columns are colored white
;*************************************************************

SetGridSize:

	;save the old bmwidth and old bmheight
	mov eax,[bmwidth]
	mov [bmwidth_old],eax
	mov eax,[bmheight]
	mov [bmheight_old],eax


	;prompt user for new bmwidth,bmheight
	mov eax,54     ;comprompt
	mov ebx,str1   ;address of prompt string
	mov ecx,Stor   ;destination to store the string
	sysenter
	;zf set on success
	jnz .done


	;split the string
	mov eax,74    ;splitstr
	mov ebx,Stor  ;parent string
	mov ecx,COMMA ;seperator byte
	mov edx,2     ;max qty substrings
	mov esi,Stor2 ;storage for sub string addresses
	sysenter

	cmp eax,0
	jz .error
	cmp eax,1   ;parent string only
	jz .error

	;if we got here we presume to have 2 substrings 


	;eax=bmwidth
	mov eax,56   ;str2eax
	mov esi,Stor ;address of bmwidth string
	sysenter

	;check for valid bmwidth 5-70
	cmp eax,5
	jb .error
	cmp eax,70
	ja .error

	;save bmwidth, this is the new width
	mov [bmwidth],eax

	;compute new gridwidth=10*bmwidth
	mov ebx,10
	mul ebx
	mov [ltlgridwidth],eax

	;now convert the bmheight string
	mov eax,56        ;str2eax
	mov esi,[Stor2]   ;bmheight substring address
	sysenter

	;check for valid bmheight 5-55
	cmp eax,5
	jb .error
	cmp eax,55
	ja .error

	;save bmheight, this is the new height
	mov [bmheight],eax

	;compute new gridheight=10*bmheight
	mov ebx,10
	mul ebx
	mov [ltlgridheight],eax


	;we move the pixels from IMAGEBUF->TEMPBUF
	;if TEMPBUF is wider or taller than we pick up new pixels
	;so we will initiate all TEMPBUF pixels to color=0xfe white
	;this is the same code we executed at the beginning of the program
	;for IMAGEBUF
	cld
	mov edi,TEMPBUF
	mov ecx,5000
	mov al,WHI
	repstosb



	;Now:
	;we have to relocate all the pixels in the grid
	;to a new spot in memory
	;only if there is a change in bmwidth
	;index = row*bmwidth + column
	mov eax,[bmwidth_old]
	cmp eax,[bmwidth]
	jz .done   ;no change in bmwidth
	

	;if we got here the bmwidth has changed
	;so we recalculate the new position of each bit
	;copy bits from IMAGEBUF->RELCOATEBUF->IMAGEBUF
	cld
	mov dword [row],0  ;col
	mov dword [col],0  ;row


.indexOldPixelLoop:

	;this loop operates on [row] and [col]
	;loop limits are [bmwidth_old] and [bmheight_old]
	;no registers have to be preserved except for the 
	;color value retrieved from IMAGEBUF and stored in dl


	;get index of pixel in old array

	mov eax,75   ;xy2i
	mov ebx,[col]
	mov ecx,[row]
	mov edx,[bmwidth_old]
	sysenter     ;returns index in eax


	;get color of that pixel
	mov dl,[eax+IMAGEBUF]

	;must preserve color in edx across tlib call
	push edx


	;compute index of pixel in new array
	mov eax,75  ;xy2i
	mov ebx,[col]
	mov ecx,[row]
	mov edx,[bmwidth]
	sysenter  ;return index in eax


	;retrieve color
	pop edx

	;save color to TEMPBUF in new array
	mov [eax+TEMPBUF],dl
	

	;increment the column
	inc dword [col]


	;check if we are at end of row
	mov eax,[col]
	cmp eax,[bmwidth_old]
	jb .indexOldPixelLoop


	mov dword [col],0  ;reset column to 0
	add dword [row],1  ;increment the row


	;check if we are at last row
	mov eax,[row]
	cmp eax,[bmheight_old]
	jb .indexOldPixelLoop



	;now copy the new array at RELOCATEBUF back to IMAGEBUF
	call TotalQtyBits  ;returns eax
	cld
	mov esi,TEMPBUF
	mov edi,IMAGEBUF
	mov ecx,eax
	repmovsb


	;reset mouse to upper left corner of grid
	mov dword [ltlmousecol],0
	mov dword [ltlmouserow],0


.error:
.done:
	jmp paint






WashTheGrid:

	;fill the entire bitmap with current color
	mov eax,[bmwidth]
	;mul dword [bmheight]
	mov ebx,[bmheight]
	mul ebx
	mov ecx,eax
	;ecx=bmwidth*bmheight

	cld
	mov edi,IMAGEBUF
	mov al,[ltlcolor]
	repstosb

	jmp paint






ChooseColor:

	;returns color index in eax (0-0xff)
	mov eax,76  ;ChooseColor
	sysenter
	cmp eax,-1
	jz .choosedone

	;assign variable [color] 
	;this is what you get when you press SPACE
	mov [ltlcolor],al

.choosedone:
	jmp paint





;*****************************************
;DrawLine
;user must make two Lclicks to draw a line
;uses the tlib Line function
;*****************************************

DrawLine:
	;we got here after user selected from the menu
	;we set this value to 1 to indicate that the 
	;next mouse Lclick should be saved as x1,y1
	mov dword [DrawLineMousePicks],1
	;now user must make 2 Lclicks
	jmp paint
	


NowDrawLine:

	;we jumped here from HandleLeftMouse
	;after user made the 2nd Lclick
	;we have collected x1,y1,x2,y2 from mouse picks
	;now we can draw the line


	;tell kernel that we are using a private pixel buffer
	mov eax,60   ;setdestvideobuf
	mov ebx,IMAGEBUF
	mov ecx,[bmwidth]
	sysenter


	;finally tell kernel we are ready for the line
	mov eax,30             ;line
	mov ebx,SOLIDLINE      ;type
	mov ecx,[x1]           ;x1
	mov edx,[y1]           ;y1
	mov esi,[x2]           ;x2
	mov edi,[y2]           ;y2
	mov ebp,[ltlcolor]    
	sysenter


	;reset BACKBUF drawing
	mov eax,60   ;setdestvideobuf
	mov ebx,0    ;reset drawing to BACKBUF
	sysenter

	jmp paint




;***************************************
;DrawCircle
;user must make two Lclicks to draw a line
;uses the tlib function circle
;****************************************

DrawCircle:

	;we got here after user selected from the menu
	;we set this value to 1 to indicate that the 
	;next mouse Lclick should be saved as x1,y1
	mov dword [DrawCircleMousePicks],1
	;now user must make 2 Lclicks
	jmp paint



NowDrawCircle:

	;we jumped here from HandleLeftMouse
	;after user made the 2nd Lclick
	;the first mouse click gave us x1,y1 center of circle
	;the 2nd mouse click x2,y2 gave us ability to compute radius
	;then we can draw the circle

	;compute radius
	mov eax,[x2]
	sub eax,[x1]  ;eax=x2-x1
	mov [DX],eax  ;save for hypot
	mov ebx,[y2]
	sub ebx,[y1]  ;ebx=y2-y1
	mov [DY],ebx  ;save for hypot
	
	mov eax,113    ;hypot
	mov ebx,DX     ;address of length side A
	mov ecx,DY     ;address of length side B
	mov edx,radius ;address to store result
	mov esi,0      ;input/return values are dword int's
	sysenter
	


	;tell kernel that we are using a private pixel buffer
	mov eax,60   ;setdestvideobuf
	mov ebx,IMAGEBUF
	mov ecx,[bmwidth]
	sysenter


	;tell kernel we are ready for the unfilled circle
	mov eax,40             ;circle
	mov ebx,0              ;unfilled
	mov ecx,[x1]           ;x
	mov edx,[y1]           ;y
	mov esi,[radius]       ;radius
	mov edi,[ltlcolor]     ;color
	sysenter


	;reset BACKBUF drawing
	mov eax,60   ;setdestvideobuf
	mov ebx,0    ;reset drawing to BACKBUF
	sysenter


.done:
	jmp paint





FloodFill:
	;put cursor in center of area then press F8
	;the border color should be differant than the "grass" within
	mov eax,77   ;floodfill
	mov ebx,IMAGEBUF
	mov ecx,[ltlmousecol]
	mov edx,[ltlmouserow]
	mov esi,[bmwidth]
	mov edi,[bmheight]
	movzx ebp,[ltlcolor]
	sysenter
	jmp paint






;******************************************************************
;ExportPixelsAsDB
;save to clipboard the array of color bytes as ascii db asm code
;this ascii array can then be PASTEd into your asm code in tedit
;we will only create a db line with at most 18 ascii decimal bytes
;so the text with NL all fits within the 80char line limit of tedit
;input:none
;return:none
;********************************************************************

ExportPixelsAsDB:

	mov esi,IMAGEBUF

	;first we write all bytes to TEMPBUF
	;then use "copytoclipboard" all in one shot
	mov edi,TEMPBUF

	mov ebx,0   ;row count
	xor eax,eax ;zero out eax
	cld
	call TotalQtyBits

	mov [qtybyteswritten],eax

	

.newrowLoop:

	;in this outer loop we must preserve esi,edi,ebx

	mov byte [edi],100   ;'d'
	inc edi
	mov byte [edi],98    ;'b'
	inc edi
	mov byte [edi],32    ;SPACE
	inc edi


	;set the number of bytes to be processed in this row
	;we can do max 18 bytes per row
	;the last row will be less
	mov ecx,18 ;max 18 bytes per row

	;check if we are down to the last row
	cmp dword [qtybyteswritten],18
	jbe .lastrow

	;decrement the total qty bytes left to write
	sub dword [qtybyteswritten],18 
	jmp .copyrowLoop

.lastrow:

	;we have less than 18 bytes left
	mov ecx,[qtybyteswritten]
	mov dword [qtybyteswritten],0 ;mark this as the last row

.copyrowLoop:

	;in this loop ecx,esi,edi must be preserved

	;get byte from IMAGEBUF into eax
	lodsb        ;al->[edi], edi++
	and eax,0xff

	;perserve
	push ecx    
	push esi

	;our color value to convert to ascii decimal
	mov ebx,eax

	;convert to ascii decimal
	mov eax,55   ;ebx2dec
	mov ecx,edi  ;destination buffer
	mov edx,0    ;unsigned
	mov esi,1    ;dont 0 terminate
	sysenter
	;we need edi to hold the address of the last char written

	;restore
	pop esi      
	pop ecx      

	mov byte [edi],44      ;add COMMA seperator
	inc edi
	loop .copyrowLoop      ;dec ecx, done with row

	dec edi                ;over-write last comma with NL
	mov byte [edi],NEWLINE ;end of row
	inc edi

	cmp dword [qtybyteswritten],0  ;was this the last row ?
	jnz .newrowLoop


.doneWrittingBytes:

	;compute total qty bytes going  to the clipboard
	mov ecx,edi
	sub ecx,TEMPBUF    ;ecx=total byte count


	;now copy to clipboard
	mov eax,78   ;copytoclipboard
	mov ebx,TEMPBUF
	;ecx=qty bytes
	sysenter

	;pause to inform user we are done
	mov eax,69
	mov ebx,str3
	sysenter

	jmp paint

	




;*********************************************************
;ImportDBasPixels
;this function does just the opposite of above
;here we assume the CLIPBOARD contains 
;an array of ascii bytes that looks like asm db code
;example:
;db 245,245,256,24,35
;db 22,33,44,55,66
;etc...
;the bytes must be decimal not hex
;also do not copy the name/code label
;start with the first line of decimal db bits
;the data got into the CLIPBOARD from a COPY in tedit
;now we ask the user what the bmwidth and bmheight are
;then we convert these ascii bytes to IMAGEBUF bytes
;if the CLIPBOARD contains something other than an array
;of DB bytes the results will be undefined
;the reason we only support decimal strings is because its
;shorter than doing db 0xff,0xfe,0x34 etc 
;and we dont support h for hex
;input:none
;return:none
;************************************************************

ImportDBasPixels:

	;get from user the bmwidth and bmheight
	;if the user gives us the wrong width
	;the image will be scrambled
	;if we get the wrong height
	;the image will be clipped or white bytes at the bottom
	mov eax,54      ;comprompt
	mov ebx,str11   ;prompt string
	mov ecx,Stor    ;storage for destination string
	sysenter
	jnz paint       ;bail


	;split the string into 2
	mov eax,74      ;splitstr
	mov ebx,Stor    ;parent string
	mov ecx,COMMA   ;seperator byte
	mov edx,2       ;max qty substrings
	mov esi,Stor2   ;storage for substring pointers
	sysenter
	jc paint        ;bail


	;convert bmwidth string to eax and save
	mov eax,56      ;str2eax
	mov esi,Stor    ;first substring
	sysenter
	mov [bmwidth],eax
	mov ebx,eax
	dumpebx ebx,str19,0


	;convert bmheight string to eax and save
	mov eax,56      ;str2eax
	mov esi,[Stor2] ;2nd substring
	sysenter
	mov [bmheight],eax
	mov ebx,eax
	dumpebx ebx,str20,0


	call TotalQtyBits  ;saves to global [qtybits]
	mov [qtybits],eax  ;save qtybits for later
	mov ebx,eax
	dumpebx ebx,str21,0


	;set the grid size
	;this code comes from SetGridSize
	;without all the checks
	;valid range is 5-55 pixels
	;we assume if your are pasting in an array of bits 
	;made by littlebits, it is already a valid size

	;compute new gridwidth=10*bmwidth
	mov eax,[bmwidth]
	mov ebx,10
	mul ebx
	mov [ltlgridwidth],eax

	;compute new gridheight=10*bmheight
	mov eax,[bmheight]
	mul ebx
	mov [ltlgridheight],eax



	;ask kernel to give us a copy of the clipboard data
	mov eax,79      ;copyfromclipboard
	mov ebx,TEMPBUF ;destination memory
	sysenter
	jc paint        ;error


	;dump the qty of ascii bytes received from the clipboard
	mov ebx,[TEMPBUF]
	mov [qtyclipboardbytes],ebx
	push ebx
	dumpebx ebx,str24,0
	pop ecx


	;compute max TEMPBUF pointer
	;we need the user to give us the bmwidth,bmheight grid size
	;but if for some reason there is a discrepency between this
	;and the amount of data in the clipboard, we will stop when
	;we run out of clipboard data
	lea eax,[TEMPBUF+4]
	add eax,[qtyclipboardbytes]
	mov [maxtempbufaddress],eax
	mov ebx,eax
	dumpebx ebx,str25,0



	;now dump all the clipboard data received 
	mov eax,81 ;dumpmem
	mov ebx,TEMPBUF
	;ecx is set above
	sysenter


	;prepare to parse our copy of the clipboard db bytes
	cld

	;set esi to point to our clipboard data
	;remember first dword is qty bytes then comes the data
	lea esi,[TEMPBUF+4]

	;ecx is incremented once for each bit written to IMAGEBUF
	xor ecx,ecx 

	mov dword [doneparsing],0


	;within these 2 loops we need to preserve ecx, esi, edi

.outerLoop:

	;temp storage for the decimal digits making up 1 pixel
	mov edi,Stor 

.innerLoop:

	;read a byte from TEMPBUF
	mov bl,[esi]  

	;and increment the TEMPBUF pointer
	inc esi

	;check against our max TEMPBUF address
	cmp esi,[maxtempbufaddress]
	jbe .continuecheck

	;set flag to indicate we are done parsing clipboard data
	mov dword [doneparsing],1
	jmp .doNL 


.continuecheck:

	;check for these because they mark the end of decimal string
	cmp bl,COMMA
	jz .doComma
	cmp bl,NL
	jz .doNL


	;check for decimal digit 0-9
	;this skips over the 'db',SPACE,COMMA and NL bytes
	pushad
	mov eax,80   ;isdigit
	;bl is byte to examine
	sysenter
	popad
	jnz .innerLoop


	;if we got here we have a valid decimal digit
	mov [edi],bl   ;save the digit to Stor
	inc edi

	jmp .innerLoop
	
.doComma:
.doNL:

	;comma or NL marks the end of a string of decimal digits
	;we have all the bytes needed to compute one pixel color value

	;0 terminate the string
	mov byte [edi],0
	inc edi


	;now convert the decimal string to a value in eax
	push ecx
	push esi
	push edi
	mov eax,56    ;str2eax
	mov esi,Stor
	sysenter
	pop edi
	pop esi
	pop ecx


	;save our pixel byte to the littlebits IMAGEBUF
	mov byte [ecx+IMAGEBUF],al
	inc ecx

	;for debug dump the value of ecx to see where we are at
	;push ebx
	;push ecx
	;mov ebx,ecx
	;dumpebx ebx,str23,0
	;pop ecx
	;pop ebx


	;are we done ?
	cmp dword [doneparsing],1
	jnz .outerLoop

	jmp paint






;this is where we exit littlebits
maindone:
	mov dword [ltlmousecol],0
	mov dword [ltlmouserow],0
	exit  ;return to tatOS




;************************************************
;ltlSetPixel
;this function colors the squares of our grid
;uses globals ltlmousecol=x and ltlmouserow=y
;which are controlled by the keyboard
;the color is global dword ltlcolor
;************************************************

ltlSetPixel:

	;convert row,col to index
	mov eax,75   ;xy2i
	mov ebx,[ltlmousecol]
	mov ecx,[ltlmouserow]
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	mov bl,[ltlcolor]      ;get current color
	mov [eax+IMAGEBUF],bl  ;set pixel
	ret




;*********************************************
;TotalQtyBits
;compute and save qtybits=bmwidth*bmheight
;input:uses global bmwidth and bmheight
;returns:eax=qtybits
;**********************************************

TotalQtyBits:
	xor edx,edx
	mov eax,[bmwidth]
	mov ebx,[bmheight] 
	mul ebx
	mov ebx,eax
	mov [qtybits],ebx
	dumpebx ebx,str10
	ret




;*******************************************************
;MirrorH
;mirror a rectangular group of pixels
;about a horizontal line
;user is prompted to enter:
;Y_mirror_line, x1,y1,x2,y2
;Y_mirror_line is the y value of the mirror line
;x1,y1,x2,y2 define the group of pixels to be mirrored
;********************************************************

MirrorH:

	;get user inputs
	mov eax,54      ;comprompt
	mov ebx,str29   ;prompt string
	mov ecx,Stor    ;storage for destination string
	sysenter
	jnz paint       ;bail


	;split the string into 5
	mov eax,74      ;splitstr
	mov ebx,Stor    ;parent string
	mov ecx,COMMA   ;seperator byte
	mov edx,5       ;max qty substrings
	mov esi,Stor2   ;storage for substring pointers
	sysenter
	jc paint        ;bail

	;convert Y_mirror_line
	mov eax,56      ;str2eax
	mov esi,Stor    ;first substring
	sysenter        ;returns eax
	mov [mirror_line],eax

	;convert x1
	mov eax,56      ;str2eax
	mov esi,[Stor2] ;get substring address
	sysenter
	mov [x1],eax

	;convert y1
	mov eax,56        ;str2eax
	mov esi,[Stor2+4] ;get substring address
	sysenter
	mov [y1],eax

	;convert x2
	mov eax,56        ;str2eax
	mov esi,[Stor2+8] ;get substring address
	sysenter
	mov [x2],eax

	;convert y2
	mov eax,56        ;str2eax
	mov esi,[Stor2+12] ;get substring address
	sysenter
	mov [y2],eax



	;now loop thru the pixels of the rectangular selection
	;and redefine each x value based on X distance to mirror line
	
	mov eax,[x1]
	mov [col],eax
	mov eax,[y1]
	mov [row],eax

.mirror_pixel_loop:

	;get array index of pixel to mirror
	mov eax,75   ;xy2i
	mov ebx,[col]
	mov ecx,[row]
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	;get pixel color
	mov al,[eax+IMAGEBUF]
	mov [color],al

	;compute new Yvalue = 2*Ymirror - y(i) of new pixel
	mov edx,[mirror_line]
	shl edx,1        ;times 2
	sub edx,[row]
	js .error   ;SF set indicates an error, mirror pixel outside grid

	;compute array index of new pixel
	mov eax,75    ;xy2i
	mov ebx,[col] ;x
	mov ecx,edx   ;y
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	;set new pixel 
	mov bl,[color]   
	mov [eax+IMAGEBUF],bl  ;set pixel

	;inc col
	inc dword [col]
	mov eax,[x2]
	cmp [col],eax
	jbe .mirror_pixel_loop
	;end of inner loop

	;inc row and reset col
	mov eax,[x1]
	mov [col],eax  ;reset col=x1
	inc dword [row]
	mov eax,[y2]
	cmp [row],eax
	jbe .mirror_pixel_loop
	;end of outer loop

.error:
	jmp paint




;********************************************************
;MirrorV
;mirror a rectangular group of pixels
;about a vertical line
;user is prompted to enter:
;X_mirror_line, x1,y1,x2,y2
;X_mirror_line is the x value of the mirror line
;x1,y1,x2,y2 define the group of pixels to be mirrored
;********************************************************

MirrorV:

	;get user inputs
	mov eax,54      ;comprompt
	mov ebx,str28   ;prompt string
	mov ecx,Stor    ;storage for destination string
	sysenter
	jnz paint       ;bail


	;split the string into 5
	mov eax,74      ;splitstr
	mov ebx,Stor    ;parent string
	mov ecx,COMMA   ;seperator byte
	mov edx,5       ;max qty substrings
	mov esi,Stor2   ;storage for substring pointers
	sysenter
	jc paint        ;bail

	;convert X_mirror_line
	mov eax,56      ;str2eax
	mov esi,Stor    ;first substring
	sysenter        ;returns eax
	mov [mirror_line],eax

	;convert x1
	mov eax,56      ;str2eax
	mov esi,[Stor2] ;get substring address
	sysenter
	mov [x1],eax

	;convert y1
	mov eax,56        ;str2eax
	mov esi,[Stor2+4] ;get substring address
	sysenter
	mov [y1],eax

	;convert x2
	mov eax,56        ;str2eax
	mov esi,[Stor2+8] ;get substring address
	sysenter
	mov [x2],eax

	;convert y2
	mov eax,56        ;str2eax
	mov esi,[Stor2+12] ;get substring address
	sysenter
	mov [y2],eax



	;now loop thru the pixels of the rectangular selection
	;and redefine each x value based on X distance to mirror line
	
	mov eax,[x1]
	mov [col],eax
	mov eax,[y1]
	mov [row],eax

.mirror_pixel_loop:

	;get array index of pixel to mirror
	mov eax,75   ;xy2i
	mov ebx,[col]
	mov ecx,[row]
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	;get pixel color
	mov al,[eax+IMAGEBUF]
	mov [color],al

	;compute new Xvalue = 2*Xmirror - x(i) of new pixel
	mov edx,[mirror_line]
	shl edx,1
	sub edx,[col]
	js .error   ;SF set indicates an error, mirror pixel outside grid

	;compute array index of new pixel
	mov eax,75   ;xy2i
	mov ebx,edx  ;x
	mov ecx,[row]
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	;set new pixel 
	mov bl,[color]   
	mov [eax+IMAGEBUF],bl  ;set pixel

	;inc col
	inc dword [col]
	mov eax,[x2]
	cmp [col],eax
	jbe .mirror_pixel_loop
	;end of inner loop

	;inc row and reset col
	mov eax,[x1]
	mov [col],eax  ;reset col=x1
	inc dword [row]
	mov eax,[y2]
	cmp [row],eax
	jbe .mirror_pixel_loop
	;end of outer loop

.error:
	jmp paint




;*************************************************
;Copy
;copy a group of pixels
;the pixels will be offset in x or y
;at the comprompt you must enter the following
;as a string of comma seperated values:

;dx,dy x1,y1,x2,y2,

;dx,dy = offset in x and y
;x1,y1 = upper left  corner of pixels to move
;x2,y2 = lower right corner of pixels to move

;all numerical values are signed dwords
;**************************************************

Copy:

	;prompt user for 6 inputs
	mov eax,54     ;comprompt
	mov ebx,str30  ;address of prompt string
	mov ecx,Stor   ;destination to store the string
	sysenter  	;zf set on success
	jnz .error

	;split the string
	mov eax,74    ;splitstr
	mov ebx,Stor  ;parent string
	mov ecx,COMMA ;seperator byte
	mov edx,6     ;max qty substrings
	mov esi,Stor2 ;storage for sub-string addresses
	sysenter

	;should be 6 substrings entered by user
	cmp eax,6
	jnz .error

	;dx
	mov eax,56   ;str2eax
	mov esi,Stor ;address of string
	sysenter
	mov [DX],eax

	;dy
	mov eax,56      ;str2eax
	mov esi,[Stor2] ;address of string
	sysenter
	mov [DY],eax

	;x1
	mov eax,56      ;str2eax
	mov esi,[Stor2+4] ;address of string
	sysenter
	mov [x1],eax

	;y1
	mov eax,56        ;str2eax
	mov esi,[Stor2+8] ;address of string
	sysenter
	mov [y1],eax

	;x2
	mov eax,56        ;str2eax
	mov esi,[Stor2+12] ;address of string
	sysenter
	mov [x2],eax

	;y2
	mov eax,56        ;str2eax
	mov esi,[Stor2+16] ;address of string
	sysenter
	mov [y2],eax



	;now loop thru the pixels of the rectangular selection
	;and redefine each pixel by dx and dy
	
	mov eax,[x1]
	mov [col],eax
	mov eax,[y1]
	mov [row],eax

.copy_pixel_loop:

	;get array index of pixel to copy
	mov eax,75   ;xy2i
	mov ebx,[col]
	mov ecx,[row]
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	;get pixel color
	mov al,[eax+IMAGEBUF]
	mov [color],al

	;compute array index of new pixel (x+dx,y+dy)
	mov ebx,[col]
	add ebx,[DX]  ;ebx=x+dx
	cmp ebx,[bmwidth]
	jae .error
	mov ecx,[row]
	add ecx,[DY]  ;ecx=y+dy
	cmp ecx,[bmheight]
	jae .error

	mov eax,75    ;xy2i
	;ebx=x 
	;ecx=y
	mov edx,[bmwidth]
	sysenter               ;eax=array index

	;set new pixel 
	mov bl,[color]   
	mov [eax+IMAGEBUF],bl  ;set pixel

	;inc col
	inc dword [col]
	mov eax,[x2]
	cmp [col],eax
	jbe .copy_pixel_loop
	;end of inner loop

	;inc row and reset col
	mov eax,[x1]
	mov [col],eax  ;reset col=x1
	inc dword [row]
	mov eax,[y2]
	cmp [row],eax
	jbe .copy_pixel_loop
	;end of outer loop


.error:
	jmp paint




;*******************************************************************
;Curve3P
;3 point curve
;draw a smooth curve using the tlib function subdivide and polyline
;the user is prompted to enter the following 
;each value is an unsigned dword value
;x1,y1 = starting point
;x2,y2 = mid point
;x3,y3 = end point
;********************************************************************

Curve3P:

	;we got here after user selected from the menu
	;we set this value to 1 to indicate that the 
	;next mouse Lclick should be saved as x1,y1
	mov dword [DrawCurve3PMousePicks],1
	;now user must make 2 more Lclicks
	jmp paint



NowDrawCurve3Points:

	;we got here after user made the 3rd Lclick
	;we now have x1,y1,x2,y2,x3,y3

	;now move coordinates into Source_Points buffer
	mov eax,[x1]
	mov [Source_Points],eax
	mov eax,[y1]
	mov [Source_Points+4],eax
	mov eax,[x2]
	mov [Source_Points+8],eax
	mov eax,[y2]
	mov [Source_Points+12],eax
	mov eax,[x3]
	mov [Source_Points+16],eax
	mov eax,[y3]
	mov  [Source_Points+20],eax


	;generate points for polyline
	mov eax,42          ;subdivide
	mov ebx,Source_Points
	mov ecx,3           ;qty points
	mov edx,TEMPBUF     ;destination points
	sysenter

	
	;tell kernel that we are using a private pixel buffer
	mov eax,60   ;setdestvideobuf
	mov ebx,IMAGEBUF
	mov ecx,[bmwidth]
	sysenter


	;draw the subdivided polyline
	mov eax,29         ;polyline
	mov ebx,0          ;open
	mov ecx,0xffffffff ;linetype
	mov edx,TEMPBUF    ;array of points
	mov esi,10         qty points
	mov edi,[ltlcolor]
	sysenter


	;reset BACKBUF drawing
	mov eax,60   ;setdestvideobuf
	mov ebx,0    ;reset drawing to BACKBUF
	sysenter



.error:
.done:
	jmp paint



;*****************************************************
;DrawArc
;draw a semi circular arc using the tlib arc function
;user is prompted for the following:
;xc,yc,radius,angle_start,angle_end
;the angles must be unsigned dword 0->359 degrees
;the ending angle must be greater than starting angle
;*****************************************************

DrawArc:

	;prompt user for 5 inputs
	mov eax,54     ;comprompt
	mov ebx,str27  ;address of prompt string
	mov ecx,Stor   ;destination to store the string
	sysenter
	;zf set on success
	jnz .done


	;split the string
	mov eax,74    ;splitstr
	mov ebx,Stor  ;parent string
	mov ecx,COMMA ;seperator byte
	mov edx,5    ;max qty substrings
	mov esi,Stor2 ;storage for sub-string addresses
	sysenter

	;should be 5 substrings entered by user
	cmp eax,5
	jnz .error


	;xc
	mov eax,56   ;str2eax
	mov esi,Stor ;address of X1 string
	sysenter
	mov [ArcStruc],eax


	;yc
	mov eax,56      ;str2eax
	mov esi,[Stor2] ;address of string
	sysenter
	mov [ArcStruc+4],eax


	;radius
	mov eax,56         ;str2eax
	mov esi,[Stor2+4]  ;address of string
	sysenter
	mov [ArcStruc+8],eax


	;angle_start
	mov eax,56         ;str2eax
	mov esi,[Stor2+8]  ;address of string
	sysenter
	mov [ArcStruc+12],eax


	;angle_end
	mov eax,56         ;str2eax
	mov esi,[Stor2+12] ;address of string
	sysenter
	mov [ArcStruc+16],eax


	;angle_inc - we default to 5 deg
	mov dword [ArcStruc+20],5


	;color
	mov eax,[ltlcolor]
	mov [ArcStruc+24],eax


	;linetype
	mov dword [ArcStruc+28],0xffffffff


	
	;tell kernel that we are using a private pixel buffer
	mov eax,60   ;setdestvideobuf
	mov ebx,IMAGEBUF
	mov ecx,[bmwidth]
	sysenter


	;draw the arc
	mov eax,46  ;arc
	mov ebp,ArcStruc
	sysenter


	;reset BACKBUF drawing
	mov eax,60   ;setdestvideobuf
	mov ebx,0    ;reset drawing to BACKBUF
	sysenter


.error:
.done:
	jmp paint








;*******************************************************
;OpenBitsFile
;open an external binary file of bits 
;The menu does not advertise this function
;because its rarely needed
;I made these binary files in the olden days
;they had no header information 
;only the bits top down left->right
;now you should use the BTS1 file  (see tatOS/tlib/bits.s)
;input:
;   set the 11 char BitsFileName 
;   hardcode the bmwidth,bmheight,ltlgridwidth,ltlgridheight
;   as shown below
;return:none
;*******************************************************

OpenBitsFile:

	;identify the bits file to be opened
	mov eax,70  ;fatgetfilename
	mov ebx,str4
	sysenter

	;read the bits (no header info)
	mov eax,72  ;fatreadfile
	mov ebx,IMAGEBUF
	sysenter


	;and hardcode these values
	;here I am showing a 16x16 bits array
	mov dword [bmwidth],16 
	mov dword [bmheight],16 
	mov dword [ltlgridwidth],160   ;ten times bmwidth
	mov dword [ltlgridheight],160  ;ten times bmheight

	call TotalQtyBits

	jmp paint


;****************************THE END ********************************

     
